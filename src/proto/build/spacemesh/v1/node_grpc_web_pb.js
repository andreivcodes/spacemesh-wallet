/**
 * @fileoverview gRPC-Web generated client stub for spacemesh.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.21.12
// source: spacemesh/v1/node.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js')

var spacemesh_v1_node_types_pb = require('../../spacemesh/v1/node_types_pb.js')
const proto = {};
proto.spacemesh = {};
proto.spacemesh.v1 = require('./node_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.spacemesh.v1.NodeServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.spacemesh.v1.NodeServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.spacemesh.v1.EchoRequest,
 *   !proto.spacemesh.v1.EchoResponse>}
 */
const methodDescriptor_NodeService_Echo = new grpc.web.MethodDescriptor(
  '/spacemesh.v1.NodeService/Echo',
  grpc.web.MethodType.UNARY,
  spacemesh_v1_node_types_pb.EchoRequest,
  spacemesh_v1_node_types_pb.EchoResponse,
  /**
   * @param {!proto.spacemesh.v1.EchoRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  spacemesh_v1_node_types_pb.EchoResponse.deserializeBinary
);


/**
 * @param {!proto.spacemesh.v1.EchoRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.spacemesh.v1.EchoResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.spacemesh.v1.EchoResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.spacemesh.v1.NodeServiceClient.prototype.echo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/spacemesh.v1.NodeService/Echo',
      request,
      metadata || {},
      methodDescriptor_NodeService_Echo,
      callback);
};


/**
 * @param {!proto.spacemesh.v1.EchoRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.spacemesh.v1.EchoResponse>}
 *     Promise that resolves to the response
 */
proto.spacemesh.v1.NodeServicePromiseClient.prototype.echo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/spacemesh.v1.NodeService/Echo',
      request,
      metadata || {},
      methodDescriptor_NodeService_Echo);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.Empty,
 *   !proto.spacemesh.v1.VersionResponse>}
 */
const methodDescriptor_NodeService_Version = new grpc.web.MethodDescriptor(
  '/spacemesh.v1.NodeService/Version',
  grpc.web.MethodType.UNARY,
  google_protobuf_empty_pb.Empty,
  spacemesh_v1_node_types_pb.VersionResponse,
  /**
   * @param {!proto.google.protobuf.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  spacemesh_v1_node_types_pb.VersionResponse.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.spacemesh.v1.VersionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.spacemesh.v1.VersionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.spacemesh.v1.NodeServiceClient.prototype.version =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/spacemesh.v1.NodeService/Version',
      request,
      metadata || {},
      methodDescriptor_NodeService_Version,
      callback);
};


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.spacemesh.v1.VersionResponse>}
 *     Promise that resolves to the response
 */
proto.spacemesh.v1.NodeServicePromiseClient.prototype.version =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/spacemesh.v1.NodeService/Version',
      request,
      metadata || {},
      methodDescriptor_NodeService_Version);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.google.protobuf.Empty,
 *   !proto.spacemesh.v1.BuildResponse>}
 */
const methodDescriptor_NodeService_Build = new grpc.web.MethodDescriptor(
  '/spacemesh.v1.NodeService/Build',
  grpc.web.MethodType.UNARY,
  google_protobuf_empty_pb.Empty,
  spacemesh_v1_node_types_pb.BuildResponse,
  /**
   * @param {!proto.google.protobuf.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  spacemesh_v1_node_types_pb.BuildResponse.deserializeBinary
);


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.spacemesh.v1.BuildResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.spacemesh.v1.BuildResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.spacemesh.v1.NodeServiceClient.prototype.build =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/spacemesh.v1.NodeService/Build',
      request,
      metadata || {},
      methodDescriptor_NodeService_Build,
      callback);
};


/**
 * @param {!proto.google.protobuf.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.spacemesh.v1.BuildResponse>}
 *     Promise that resolves to the response
 */
proto.spacemesh.v1.NodeServicePromiseClient.prototype.build =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/spacemesh.v1.NodeService/Build',
      request,
      metadata || {},
      methodDescriptor_NodeService_Build);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.spacemesh.v1.StatusRequest,
 *   !proto.spacemesh.v1.StatusResponse>}
 */
const methodDescriptor_NodeService_Status = new grpc.web.MethodDescriptor(
  '/spacemesh.v1.NodeService/Status',
  grpc.web.MethodType.UNARY,
  spacemesh_v1_node_types_pb.StatusRequest,
  spacemesh_v1_node_types_pb.StatusResponse,
  /**
   * @param {!proto.spacemesh.v1.StatusRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  spacemesh_v1_node_types_pb.StatusResponse.deserializeBinary
);


/**
 * @param {!proto.spacemesh.v1.StatusRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.spacemesh.v1.StatusResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.spacemesh.v1.StatusResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.spacemesh.v1.NodeServiceClient.prototype.status =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/spacemesh.v1.NodeService/Status',
      request,
      metadata || {},
      methodDescriptor_NodeService_Status,
      callback);
};


/**
 * @param {!proto.spacemesh.v1.StatusRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.spacemesh.v1.StatusResponse>}
 *     Promise that resolves to the response
 */
proto.spacemesh.v1.NodeServicePromiseClient.prototype.status =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/spacemesh.v1.NodeService/Status',
      request,
      metadata || {},
      methodDescriptor_NodeService_Status);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.spacemesh.v1.SyncStartRequest,
 *   !proto.spacemesh.v1.SyncStartResponse>}
 */
const methodDescriptor_NodeService_SyncStart = new grpc.web.MethodDescriptor(
  '/spacemesh.v1.NodeService/SyncStart',
  grpc.web.MethodType.UNARY,
  spacemesh_v1_node_types_pb.SyncStartRequest,
  spacemesh_v1_node_types_pb.SyncStartResponse,
  /**
   * @param {!proto.spacemesh.v1.SyncStartRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  spacemesh_v1_node_types_pb.SyncStartResponse.deserializeBinary
);


/**
 * @param {!proto.spacemesh.v1.SyncStartRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.spacemesh.v1.SyncStartResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.spacemesh.v1.SyncStartResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.spacemesh.v1.NodeServiceClient.prototype.syncStart =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/spacemesh.v1.NodeService/SyncStart',
      request,
      metadata || {},
      methodDescriptor_NodeService_SyncStart,
      callback);
};


/**
 * @param {!proto.spacemesh.v1.SyncStartRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.spacemesh.v1.SyncStartResponse>}
 *     Promise that resolves to the response
 */
proto.spacemesh.v1.NodeServicePromiseClient.prototype.syncStart =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/spacemesh.v1.NodeService/SyncStart',
      request,
      metadata || {},
      methodDescriptor_NodeService_SyncStart);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.spacemesh.v1.ShutdownRequest,
 *   !proto.spacemesh.v1.ShutdownResponse>}
 */
const methodDescriptor_NodeService_Shutdown = new grpc.web.MethodDescriptor(
  '/spacemesh.v1.NodeService/Shutdown',
  grpc.web.MethodType.UNARY,
  spacemesh_v1_node_types_pb.ShutdownRequest,
  spacemesh_v1_node_types_pb.ShutdownResponse,
  /**
   * @param {!proto.spacemesh.v1.ShutdownRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  spacemesh_v1_node_types_pb.ShutdownResponse.deserializeBinary
);


/**
 * @param {!proto.spacemesh.v1.ShutdownRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.spacemesh.v1.ShutdownResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.spacemesh.v1.ShutdownResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.spacemesh.v1.NodeServiceClient.prototype.shutdown =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/spacemesh.v1.NodeService/Shutdown',
      request,
      metadata || {},
      methodDescriptor_NodeService_Shutdown,
      callback);
};


/**
 * @param {!proto.spacemesh.v1.ShutdownRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.spacemesh.v1.ShutdownResponse>}
 *     Promise that resolves to the response
 */
proto.spacemesh.v1.NodeServicePromiseClient.prototype.shutdown =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/spacemesh.v1.NodeService/Shutdown',
      request,
      metadata || {},
      methodDescriptor_NodeService_Shutdown);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.spacemesh.v1.UpdatePoetServersRequest,
 *   !proto.spacemesh.v1.UpdatePoetServersResponse>}
 */
const methodDescriptor_NodeService_UpdatePoetServers = new grpc.web.MethodDescriptor(
  '/spacemesh.v1.NodeService/UpdatePoetServers',
  grpc.web.MethodType.UNARY,
  spacemesh_v1_node_types_pb.UpdatePoetServersRequest,
  spacemesh_v1_node_types_pb.UpdatePoetServersResponse,
  /**
   * @param {!proto.spacemesh.v1.UpdatePoetServersRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  spacemesh_v1_node_types_pb.UpdatePoetServersResponse.deserializeBinary
);


/**
 * @param {!proto.spacemesh.v1.UpdatePoetServersRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.spacemesh.v1.UpdatePoetServersResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.spacemesh.v1.UpdatePoetServersResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.spacemesh.v1.NodeServiceClient.prototype.updatePoetServers =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/spacemesh.v1.NodeService/UpdatePoetServers',
      request,
      metadata || {},
      methodDescriptor_NodeService_UpdatePoetServers,
      callback);
};


/**
 * @param {!proto.spacemesh.v1.UpdatePoetServersRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.spacemesh.v1.UpdatePoetServersResponse>}
 *     Promise that resolves to the response
 */
proto.spacemesh.v1.NodeServicePromiseClient.prototype.updatePoetServers =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/spacemesh.v1.NodeService/UpdatePoetServers',
      request,
      metadata || {},
      methodDescriptor_NodeService_UpdatePoetServers);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.spacemesh.v1.StatusStreamRequest,
 *   !proto.spacemesh.v1.StatusStreamResponse>}
 */
const methodDescriptor_NodeService_StatusStream = new grpc.web.MethodDescriptor(
  '/spacemesh.v1.NodeService/StatusStream',
  grpc.web.MethodType.SERVER_STREAMING,
  spacemesh_v1_node_types_pb.StatusStreamRequest,
  spacemesh_v1_node_types_pb.StatusStreamResponse,
  /**
   * @param {!proto.spacemesh.v1.StatusStreamRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  spacemesh_v1_node_types_pb.StatusStreamResponse.deserializeBinary
);


/**
 * @param {!proto.spacemesh.v1.StatusStreamRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.spacemesh.v1.StatusStreamResponse>}
 *     The XHR Node Readable Stream
 */
proto.spacemesh.v1.NodeServiceClient.prototype.statusStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/spacemesh.v1.NodeService/StatusStream',
      request,
      metadata || {},
      methodDescriptor_NodeService_StatusStream);
};


/**
 * @param {!proto.spacemesh.v1.StatusStreamRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.spacemesh.v1.StatusStreamResponse>}
 *     The XHR Node Readable Stream
 */
proto.spacemesh.v1.NodeServicePromiseClient.prototype.statusStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/spacemesh.v1.NodeService/StatusStream',
      request,
      metadata || {},
      methodDescriptor_NodeService_StatusStream);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.spacemesh.v1.ErrorStreamRequest,
 *   !proto.spacemesh.v1.ErrorStreamResponse>}
 */
const methodDescriptor_NodeService_ErrorStream = new grpc.web.MethodDescriptor(
  '/spacemesh.v1.NodeService/ErrorStream',
  grpc.web.MethodType.SERVER_STREAMING,
  spacemesh_v1_node_types_pb.ErrorStreamRequest,
  spacemesh_v1_node_types_pb.ErrorStreamResponse,
  /**
   * @param {!proto.spacemesh.v1.ErrorStreamRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  spacemesh_v1_node_types_pb.ErrorStreamResponse.deserializeBinary
);


/**
 * @param {!proto.spacemesh.v1.ErrorStreamRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.spacemesh.v1.ErrorStreamResponse>}
 *     The XHR Node Readable Stream
 */
proto.spacemesh.v1.NodeServiceClient.prototype.errorStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/spacemesh.v1.NodeService/ErrorStream',
      request,
      metadata || {},
      methodDescriptor_NodeService_ErrorStream);
};


/**
 * @param {!proto.spacemesh.v1.ErrorStreamRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.spacemesh.v1.ErrorStreamResponse>}
 *     The XHR Node Readable Stream
 */
proto.spacemesh.v1.NodeServicePromiseClient.prototype.errorStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/spacemesh.v1.NodeService/ErrorStream',
      request,
      metadata || {},
      methodDescriptor_NodeService_ErrorStream);
};


module.exports = proto.spacemesh.v1;

