// source: spacemesh/v1/debug_types.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var spacemesh_v1_global_state_types_pb = require('../../spacemesh/v1/global_state_types_pb.js');
goog.object.extend(proto, spacemesh_v1_global_state_types_pb);
var spacemesh_v1_types_pb = require('../../spacemesh/v1/types_pb.js');
goog.object.extend(proto, spacemesh_v1_types_pb);
goog.exportSymbol('proto.spacemesh.v1.AccountsResponse', null, global);
goog.exportSymbol('proto.spacemesh.v1.Eligibility', null, global);
goog.exportSymbol('proto.spacemesh.v1.EpochData', null, global);
goog.exportSymbol('proto.spacemesh.v1.NetworkInfoResponse', null, global);
goog.exportSymbol('proto.spacemesh.v1.Proposal', null, global);
goog.exportSymbol('proto.spacemesh.v1.Proposal.EpochDataCase', null, global);
goog.exportSymbol('proto.spacemesh.v1.Proposal.Status', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.AccountsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.spacemesh.v1.AccountsResponse.repeatedFields_, null);
};
goog.inherits(proto.spacemesh.v1.AccountsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spacemesh.v1.AccountsResponse.displayName = 'proto.spacemesh.v1.AccountsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.NetworkInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.NetworkInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spacemesh.v1.NetworkInfoResponse.displayName = 'proto.spacemesh.v1.NetworkInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.EpochData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.EpochData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spacemesh.v1.EpochData.displayName = 'proto.spacemesh.v1.EpochData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.Eligibility = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.Eligibility, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spacemesh.v1.Eligibility.displayName = 'proto.spacemesh.v1.Eligibility';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.Proposal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.spacemesh.v1.Proposal.repeatedFields_, proto.spacemesh.v1.Proposal.oneofGroups_);
};
goog.inherits(proto.spacemesh.v1.Proposal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spacemesh.v1.Proposal.displayName = 'proto.spacemesh.v1.Proposal';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.spacemesh.v1.AccountsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.AccountsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.AccountsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.AccountsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.AccountsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountWrapperList: jspb.Message.toObjectList(msg.getAccountWrapperList(),
    spacemesh_v1_global_state_types_pb.Account.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.AccountsResponse}
 */
proto.spacemesh.v1.AccountsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.AccountsResponse;
  return proto.spacemesh.v1.AccountsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.AccountsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.AccountsResponse}
 */
proto.spacemesh.v1.AccountsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new spacemesh_v1_global_state_types_pb.Account;
      reader.readMessage(value,spacemesh_v1_global_state_types_pb.Account.deserializeBinaryFromReader);
      msg.addAccountWrapper(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.AccountsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.AccountsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.AccountsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.AccountsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountWrapperList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      spacemesh_v1_global_state_types_pb.Account.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Account account_wrapper = 1;
 * @return {!Array<!proto.spacemesh.v1.Account>}
 */
proto.spacemesh.v1.AccountsResponse.prototype.getAccountWrapperList = function() {
  return /** @type{!Array<!proto.spacemesh.v1.Account>} */ (
    jspb.Message.getRepeatedWrapperField(this, spacemesh_v1_global_state_types_pb.Account, 1));
};


/**
 * @param {!Array<!proto.spacemesh.v1.Account>} value
 * @return {!proto.spacemesh.v1.AccountsResponse} returns this
*/
proto.spacemesh.v1.AccountsResponse.prototype.setAccountWrapperList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.spacemesh.v1.Account=} opt_value
 * @param {number=} opt_index
 * @return {!proto.spacemesh.v1.Account}
 */
proto.spacemesh.v1.AccountsResponse.prototype.addAccountWrapper = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.spacemesh.v1.Account, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.spacemesh.v1.AccountsResponse} returns this
 */
proto.spacemesh.v1.AccountsResponse.prototype.clearAccountWrapperList = function() {
  return this.setAccountWrapperList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.NetworkInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.NetworkInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.NetworkInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.NetworkInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.NetworkInfoResponse}
 */
proto.spacemesh.v1.NetworkInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.NetworkInfoResponse;
  return proto.spacemesh.v1.NetworkInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.NetworkInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.NetworkInfoResponse}
 */
proto.spacemesh.v1.NetworkInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.NetworkInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.NetworkInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.NetworkInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.NetworkInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.spacemesh.v1.NetworkInfoResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.spacemesh.v1.NetworkInfoResponse} returns this
 */
proto.spacemesh.v1.NetworkInfoResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.EpochData.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.EpochData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.EpochData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.EpochData.toObject = function(includeInstance, msg) {
  var f, obj = {
    beacon: msg.getBeacon_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.EpochData}
 */
proto.spacemesh.v1.EpochData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.EpochData;
  return proto.spacemesh.v1.EpochData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.EpochData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.EpochData}
 */
proto.spacemesh.v1.EpochData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBeacon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.EpochData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.EpochData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.EpochData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.EpochData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBeacon_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes beacon = 1;
 * @return {string}
 */
proto.spacemesh.v1.EpochData.prototype.getBeacon = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes beacon = 1;
 * This is a type-conversion wrapper around `getBeacon()`
 * @return {string}
 */
proto.spacemesh.v1.EpochData.prototype.getBeacon_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBeacon()));
};


/**
 * optional bytes beacon = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBeacon()`
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.EpochData.prototype.getBeacon_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBeacon()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.spacemesh.v1.EpochData} returns this
 */
proto.spacemesh.v1.EpochData.prototype.setBeacon = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.Eligibility.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.Eligibility.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.Eligibility} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Eligibility.toObject = function(includeInstance, msg) {
  var f, obj = {
    j: jspb.Message.getFieldWithDefault(msg, 1, 0),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.Eligibility}
 */
proto.spacemesh.v1.Eligibility.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.Eligibility;
  return proto.spacemesh.v1.Eligibility.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.Eligibility} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.Eligibility}
 */
proto.spacemesh.v1.Eligibility.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setJ(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.Eligibility.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.Eligibility.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.Eligibility} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Eligibility.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJ();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint32 j = 1;
 * @return {number}
 */
proto.spacemesh.v1.Eligibility.prototype.getJ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.spacemesh.v1.Eligibility} returns this
 */
proto.spacemesh.v1.Eligibility.prototype.setJ = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes signature = 2;
 * @return {string}
 */
proto.spacemesh.v1.Eligibility.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.spacemesh.v1.Eligibility.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.Eligibility.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.spacemesh.v1.Eligibility} returns this
 */
proto.spacemesh.v1.Eligibility.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.spacemesh.v1.Proposal.repeatedFields_ = [8];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.spacemesh.v1.Proposal.oneofGroups_ = [[5,6]];

/**
 * @enum {number}
 */
proto.spacemesh.v1.Proposal.EpochDataCase = {
  EPOCH_DATA_NOT_SET: 0,
  REFERENCE: 5,
  DATA: 6
};

/**
 * @return {proto.spacemesh.v1.Proposal.EpochDataCase}
 */
proto.spacemesh.v1.Proposal.prototype.getEpochDataCase = function() {
  return /** @type {proto.spacemesh.v1.Proposal.EpochDataCase} */(jspb.Message.computeOneofCase(this, proto.spacemesh.v1.Proposal.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.Proposal.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.Proposal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.Proposal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Proposal.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    epoch: (f = msg.getEpoch()) && spacemesh_v1_types_pb.SimpleInt.toObject(includeInstance, f),
    layer: (f = msg.getLayer()) && spacemesh_v1_types_pb.LayerNumber.toObject(includeInstance, f),
    smesher: (f = msg.getSmesher()) && spacemesh_v1_types_pb.SmesherId.toObject(includeInstance, f),
    reference: msg.getReference_asB64(),
    data: (f = msg.getData()) && proto.spacemesh.v1.EpochData.toObject(includeInstance, f),
    ballot: msg.getBallot_asB64(),
    eligibilitiesList: jspb.Message.toObjectList(msg.getEligibilitiesList(),
    proto.spacemesh.v1.Eligibility.toObject, includeInstance),
    status: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.Proposal}
 */
proto.spacemesh.v1.Proposal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.Proposal;
  return proto.spacemesh.v1.Proposal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.Proposal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.Proposal}
 */
proto.spacemesh.v1.Proposal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = new spacemesh_v1_types_pb.SimpleInt;
      reader.readMessage(value,spacemesh_v1_types_pb.SimpleInt.deserializeBinaryFromReader);
      msg.setEpoch(value);
      break;
    case 3:
      var value = new spacemesh_v1_types_pb.LayerNumber;
      reader.readMessage(value,spacemesh_v1_types_pb.LayerNumber.deserializeBinaryFromReader);
      msg.setLayer(value);
      break;
    case 4:
      var value = new spacemesh_v1_types_pb.SmesherId;
      reader.readMessage(value,spacemesh_v1_types_pb.SmesherId.deserializeBinaryFromReader);
      msg.setSmesher(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReference(value);
      break;
    case 6:
      var value = new proto.spacemesh.v1.EpochData;
      reader.readMessage(value,proto.spacemesh.v1.EpochData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBallot(value);
      break;
    case 8:
      var value = new proto.spacemesh.v1.Eligibility;
      reader.readMessage(value,proto.spacemesh.v1.Eligibility.deserializeBinaryFromReader);
      msg.addEligibilities(value);
      break;
    case 9:
      var value = /** @type {!proto.spacemesh.v1.Proposal.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.Proposal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.Proposal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.Proposal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Proposal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getEpoch();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      spacemesh_v1_types_pb.SimpleInt.serializeBinaryToWriter
    );
  }
  f = message.getLayer();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      spacemesh_v1_types_pb.LayerNumber.serializeBinaryToWriter
    );
  }
  f = message.getSmesher();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      spacemesh_v1_types_pb.SmesherId.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.spacemesh.v1.EpochData.serializeBinaryToWriter
    );
  }
  f = message.getBallot_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getEligibilitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.spacemesh.v1.Eligibility.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.spacemesh.v1.Proposal.Status = {
  CREATED: 0,
  INCLUDED: 1
};

/**
 * optional bytes id = 1;
 * @return {string}
 */
proto.spacemesh.v1.Proposal.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.spacemesh.v1.Proposal.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.Proposal.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.spacemesh.v1.Proposal} returns this
 */
proto.spacemesh.v1.Proposal.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional SimpleInt epoch = 2;
 * @return {?proto.spacemesh.v1.SimpleInt}
 */
proto.spacemesh.v1.Proposal.prototype.getEpoch = function() {
  return /** @type{?proto.spacemesh.v1.SimpleInt} */ (
    jspb.Message.getWrapperField(this, spacemesh_v1_types_pb.SimpleInt, 2));
};


/**
 * @param {?proto.spacemesh.v1.SimpleInt|undefined} value
 * @return {!proto.spacemesh.v1.Proposal} returns this
*/
proto.spacemesh.v1.Proposal.prototype.setEpoch = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.spacemesh.v1.Proposal} returns this
 */
proto.spacemesh.v1.Proposal.prototype.clearEpoch = function() {
  return this.setEpoch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.spacemesh.v1.Proposal.prototype.hasEpoch = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LayerNumber layer = 3;
 * @return {?proto.spacemesh.v1.LayerNumber}
 */
proto.spacemesh.v1.Proposal.prototype.getLayer = function() {
  return /** @type{?proto.spacemesh.v1.LayerNumber} */ (
    jspb.Message.getWrapperField(this, spacemesh_v1_types_pb.LayerNumber, 3));
};


/**
 * @param {?proto.spacemesh.v1.LayerNumber|undefined} value
 * @return {!proto.spacemesh.v1.Proposal} returns this
*/
proto.spacemesh.v1.Proposal.prototype.setLayer = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.spacemesh.v1.Proposal} returns this
 */
proto.spacemesh.v1.Proposal.prototype.clearLayer = function() {
  return this.setLayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.spacemesh.v1.Proposal.prototype.hasLayer = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SmesherId smesher = 4;
 * @return {?proto.spacemesh.v1.SmesherId}
 */
proto.spacemesh.v1.Proposal.prototype.getSmesher = function() {
  return /** @type{?proto.spacemesh.v1.SmesherId} */ (
    jspb.Message.getWrapperField(this, spacemesh_v1_types_pb.SmesherId, 4));
};


/**
 * @param {?proto.spacemesh.v1.SmesherId|undefined} value
 * @return {!proto.spacemesh.v1.Proposal} returns this
*/
proto.spacemesh.v1.Proposal.prototype.setSmesher = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.spacemesh.v1.Proposal} returns this
 */
proto.spacemesh.v1.Proposal.prototype.clearSmesher = function() {
  return this.setSmesher(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.spacemesh.v1.Proposal.prototype.hasSmesher = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes reference = 5;
 * @return {string}
 */
proto.spacemesh.v1.Proposal.prototype.getReference = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes reference = 5;
 * This is a type-conversion wrapper around `getReference()`
 * @return {string}
 */
proto.spacemesh.v1.Proposal.prototype.getReference_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReference()));
};


/**
 * optional bytes reference = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReference()`
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.Proposal.prototype.getReference_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReference()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.spacemesh.v1.Proposal} returns this
 */
proto.spacemesh.v1.Proposal.prototype.setReference = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.spacemesh.v1.Proposal.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.spacemesh.v1.Proposal} returns this
 */
proto.spacemesh.v1.Proposal.prototype.clearReference = function() {
  return jspb.Message.setOneofField(this, 5, proto.spacemesh.v1.Proposal.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.spacemesh.v1.Proposal.prototype.hasReference = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional EpochData data = 6;
 * @return {?proto.spacemesh.v1.EpochData}
 */
proto.spacemesh.v1.Proposal.prototype.getData = function() {
  return /** @type{?proto.spacemesh.v1.EpochData} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.EpochData, 6));
};


/**
 * @param {?proto.spacemesh.v1.EpochData|undefined} value
 * @return {!proto.spacemesh.v1.Proposal} returns this
*/
proto.spacemesh.v1.Proposal.prototype.setData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.spacemesh.v1.Proposal.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.spacemesh.v1.Proposal} returns this
 */
proto.spacemesh.v1.Proposal.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.spacemesh.v1.Proposal.prototype.hasData = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bytes ballot = 7;
 * @return {string}
 */
proto.spacemesh.v1.Proposal.prototype.getBallot = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes ballot = 7;
 * This is a type-conversion wrapper around `getBallot()`
 * @return {string}
 */
proto.spacemesh.v1.Proposal.prototype.getBallot_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBallot()));
};


/**
 * optional bytes ballot = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBallot()`
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.Proposal.prototype.getBallot_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBallot()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.spacemesh.v1.Proposal} returns this
 */
proto.spacemesh.v1.Proposal.prototype.setBallot = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * repeated Eligibility eligibilities = 8;
 * @return {!Array<!proto.spacemesh.v1.Eligibility>}
 */
proto.spacemesh.v1.Proposal.prototype.getEligibilitiesList = function() {
  return /** @type{!Array<!proto.spacemesh.v1.Eligibility>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.spacemesh.v1.Eligibility, 8));
};


/**
 * @param {!Array<!proto.spacemesh.v1.Eligibility>} value
 * @return {!proto.spacemesh.v1.Proposal} returns this
*/
proto.spacemesh.v1.Proposal.prototype.setEligibilitiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.spacemesh.v1.Eligibility=} opt_value
 * @param {number=} opt_index
 * @return {!proto.spacemesh.v1.Eligibility}
 */
proto.spacemesh.v1.Proposal.prototype.addEligibilities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.spacemesh.v1.Eligibility, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.spacemesh.v1.Proposal} returns this
 */
proto.spacemesh.v1.Proposal.prototype.clearEligibilitiesList = function() {
  return this.setEligibilitiesList([]);
};


/**
 * optional Status status = 9;
 * @return {!proto.spacemesh.v1.Proposal.Status}
 */
proto.spacemesh.v1.Proposal.prototype.getStatus = function() {
  return /** @type {!proto.spacemesh.v1.Proposal.Status} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.spacemesh.v1.Proposal.Status} value
 * @return {!proto.spacemesh.v1.Proposal} returns this
 */
proto.spacemesh.v1.Proposal.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


goog.object.extend(exports, proto.spacemesh.v1);
