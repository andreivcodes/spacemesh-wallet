/**
 * @fileoverview gRPC-Web generated client stub for spacemesh.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.21.12
// source: spacemesh/v1/global_state.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var spacemesh_v1_global_state_types_pb = require('../../spacemesh/v1/global_state_types_pb.js')
const proto = {};
proto.spacemesh = {};
proto.spacemesh.v1 = require('./global_state_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.spacemesh.v1.GlobalStateServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.spacemesh.v1.GlobalStateServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.spacemesh.v1.GlobalStateHashRequest,
 *   !proto.spacemesh.v1.GlobalStateHashResponse>}
 */
const methodDescriptor_GlobalStateService_GlobalStateHash = new grpc.web.MethodDescriptor(
  '/spacemesh.v1.GlobalStateService/GlobalStateHash',
  grpc.web.MethodType.UNARY,
  spacemesh_v1_global_state_types_pb.GlobalStateHashRequest,
  spacemesh_v1_global_state_types_pb.GlobalStateHashResponse,
  /**
   * @param {!proto.spacemesh.v1.GlobalStateHashRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  spacemesh_v1_global_state_types_pb.GlobalStateHashResponse.deserializeBinary
);


/**
 * @param {!proto.spacemesh.v1.GlobalStateHashRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.spacemesh.v1.GlobalStateHashResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.spacemesh.v1.GlobalStateHashResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.spacemesh.v1.GlobalStateServiceClient.prototype.globalStateHash =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/spacemesh.v1.GlobalStateService/GlobalStateHash',
      request,
      metadata || {},
      methodDescriptor_GlobalStateService_GlobalStateHash,
      callback);
};


/**
 * @param {!proto.spacemesh.v1.GlobalStateHashRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.spacemesh.v1.GlobalStateHashResponse>}
 *     Promise that resolves to the response
 */
proto.spacemesh.v1.GlobalStateServicePromiseClient.prototype.globalStateHash =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/spacemesh.v1.GlobalStateService/GlobalStateHash',
      request,
      metadata || {},
      methodDescriptor_GlobalStateService_GlobalStateHash);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.spacemesh.v1.AccountRequest,
 *   !proto.spacemesh.v1.AccountResponse>}
 */
const methodDescriptor_GlobalStateService_Account = new grpc.web.MethodDescriptor(
  '/spacemesh.v1.GlobalStateService/Account',
  grpc.web.MethodType.UNARY,
  spacemesh_v1_global_state_types_pb.AccountRequest,
  spacemesh_v1_global_state_types_pb.AccountResponse,
  /**
   * @param {!proto.spacemesh.v1.AccountRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  spacemesh_v1_global_state_types_pb.AccountResponse.deserializeBinary
);


/**
 * @param {!proto.spacemesh.v1.AccountRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.spacemesh.v1.AccountResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.spacemesh.v1.AccountResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.spacemesh.v1.GlobalStateServiceClient.prototype.account =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/spacemesh.v1.GlobalStateService/Account',
      request,
      metadata || {},
      methodDescriptor_GlobalStateService_Account,
      callback);
};


/**
 * @param {!proto.spacemesh.v1.AccountRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.spacemesh.v1.AccountResponse>}
 *     Promise that resolves to the response
 */
proto.spacemesh.v1.GlobalStateServicePromiseClient.prototype.account =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/spacemesh.v1.GlobalStateService/Account',
      request,
      metadata || {},
      methodDescriptor_GlobalStateService_Account);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.spacemesh.v1.AccountDataQueryRequest,
 *   !proto.spacemesh.v1.AccountDataQueryResponse>}
 */
const methodDescriptor_GlobalStateService_AccountDataQuery = new grpc.web.MethodDescriptor(
  '/spacemesh.v1.GlobalStateService/AccountDataQuery',
  grpc.web.MethodType.UNARY,
  spacemesh_v1_global_state_types_pb.AccountDataQueryRequest,
  spacemesh_v1_global_state_types_pb.AccountDataQueryResponse,
  /**
   * @param {!proto.spacemesh.v1.AccountDataQueryRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  spacemesh_v1_global_state_types_pb.AccountDataQueryResponse.deserializeBinary
);


/**
 * @param {!proto.spacemesh.v1.AccountDataQueryRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.spacemesh.v1.AccountDataQueryResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.spacemesh.v1.AccountDataQueryResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.spacemesh.v1.GlobalStateServiceClient.prototype.accountDataQuery =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/spacemesh.v1.GlobalStateService/AccountDataQuery',
      request,
      metadata || {},
      methodDescriptor_GlobalStateService_AccountDataQuery,
      callback);
};


/**
 * @param {!proto.spacemesh.v1.AccountDataQueryRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.spacemesh.v1.AccountDataQueryResponse>}
 *     Promise that resolves to the response
 */
proto.spacemesh.v1.GlobalStateServicePromiseClient.prototype.accountDataQuery =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/spacemesh.v1.GlobalStateService/AccountDataQuery',
      request,
      metadata || {},
      methodDescriptor_GlobalStateService_AccountDataQuery);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.spacemesh.v1.SmesherDataQueryRequest,
 *   !proto.spacemesh.v1.SmesherDataQueryResponse>}
 */
const methodDescriptor_GlobalStateService_SmesherDataQuery = new grpc.web.MethodDescriptor(
  '/spacemesh.v1.GlobalStateService/SmesherDataQuery',
  grpc.web.MethodType.UNARY,
  spacemesh_v1_global_state_types_pb.SmesherDataQueryRequest,
  spacemesh_v1_global_state_types_pb.SmesherDataQueryResponse,
  /**
   * @param {!proto.spacemesh.v1.SmesherDataQueryRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  spacemesh_v1_global_state_types_pb.SmesherDataQueryResponse.deserializeBinary
);


/**
 * @param {!proto.spacemesh.v1.SmesherDataQueryRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.spacemesh.v1.SmesherDataQueryResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.spacemesh.v1.SmesherDataQueryResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.spacemesh.v1.GlobalStateServiceClient.prototype.smesherDataQuery =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/spacemesh.v1.GlobalStateService/SmesherDataQuery',
      request,
      metadata || {},
      methodDescriptor_GlobalStateService_SmesherDataQuery,
      callback);
};


/**
 * @param {!proto.spacemesh.v1.SmesherDataQueryRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.spacemesh.v1.SmesherDataQueryResponse>}
 *     Promise that resolves to the response
 */
proto.spacemesh.v1.GlobalStateServicePromiseClient.prototype.smesherDataQuery =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/spacemesh.v1.GlobalStateService/SmesherDataQuery',
      request,
      metadata || {},
      methodDescriptor_GlobalStateService_SmesherDataQuery);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.spacemesh.v1.AccountDataStreamRequest,
 *   !proto.spacemesh.v1.AccountDataStreamResponse>}
 */
const methodDescriptor_GlobalStateService_AccountDataStream = new grpc.web.MethodDescriptor(
  '/spacemesh.v1.GlobalStateService/AccountDataStream',
  grpc.web.MethodType.SERVER_STREAMING,
  spacemesh_v1_global_state_types_pb.AccountDataStreamRequest,
  spacemesh_v1_global_state_types_pb.AccountDataStreamResponse,
  /**
   * @param {!proto.spacemesh.v1.AccountDataStreamRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  spacemesh_v1_global_state_types_pb.AccountDataStreamResponse.deserializeBinary
);


/**
 * @param {!proto.spacemesh.v1.AccountDataStreamRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.spacemesh.v1.AccountDataStreamResponse>}
 *     The XHR Node Readable Stream
 */
proto.spacemesh.v1.GlobalStateServiceClient.prototype.accountDataStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/spacemesh.v1.GlobalStateService/AccountDataStream',
      request,
      metadata || {},
      methodDescriptor_GlobalStateService_AccountDataStream);
};


/**
 * @param {!proto.spacemesh.v1.AccountDataStreamRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.spacemesh.v1.AccountDataStreamResponse>}
 *     The XHR Node Readable Stream
 */
proto.spacemesh.v1.GlobalStateServicePromiseClient.prototype.accountDataStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/spacemesh.v1.GlobalStateService/AccountDataStream',
      request,
      metadata || {},
      methodDescriptor_GlobalStateService_AccountDataStream);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.spacemesh.v1.SmesherRewardStreamRequest,
 *   !proto.spacemesh.v1.SmesherRewardStreamResponse>}
 */
const methodDescriptor_GlobalStateService_SmesherRewardStream = new grpc.web.MethodDescriptor(
  '/spacemesh.v1.GlobalStateService/SmesherRewardStream',
  grpc.web.MethodType.SERVER_STREAMING,
  spacemesh_v1_global_state_types_pb.SmesherRewardStreamRequest,
  spacemesh_v1_global_state_types_pb.SmesherRewardStreamResponse,
  /**
   * @param {!proto.spacemesh.v1.SmesherRewardStreamRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  spacemesh_v1_global_state_types_pb.SmesherRewardStreamResponse.deserializeBinary
);


/**
 * @param {!proto.spacemesh.v1.SmesherRewardStreamRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.spacemesh.v1.SmesherRewardStreamResponse>}
 *     The XHR Node Readable Stream
 */
proto.spacemesh.v1.GlobalStateServiceClient.prototype.smesherRewardStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/spacemesh.v1.GlobalStateService/SmesherRewardStream',
      request,
      metadata || {},
      methodDescriptor_GlobalStateService_SmesherRewardStream);
};


/**
 * @param {!proto.spacemesh.v1.SmesherRewardStreamRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.spacemesh.v1.SmesherRewardStreamResponse>}
 *     The XHR Node Readable Stream
 */
proto.spacemesh.v1.GlobalStateServicePromiseClient.prototype.smesherRewardStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/spacemesh.v1.GlobalStateService/SmesherRewardStream',
      request,
      metadata || {},
      methodDescriptor_GlobalStateService_SmesherRewardStream);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.spacemesh.v1.AppEventStreamRequest,
 *   !proto.spacemesh.v1.AppEventStreamResponse>}
 */
const methodDescriptor_GlobalStateService_AppEventStream = new grpc.web.MethodDescriptor(
  '/spacemesh.v1.GlobalStateService/AppEventStream',
  grpc.web.MethodType.SERVER_STREAMING,
  spacemesh_v1_global_state_types_pb.AppEventStreamRequest,
  spacemesh_v1_global_state_types_pb.AppEventStreamResponse,
  /**
   * @param {!proto.spacemesh.v1.AppEventStreamRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  spacemesh_v1_global_state_types_pb.AppEventStreamResponse.deserializeBinary
);


/**
 * @param {!proto.spacemesh.v1.AppEventStreamRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.spacemesh.v1.AppEventStreamResponse>}
 *     The XHR Node Readable Stream
 */
proto.spacemesh.v1.GlobalStateServiceClient.prototype.appEventStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/spacemesh.v1.GlobalStateService/AppEventStream',
      request,
      metadata || {},
      methodDescriptor_GlobalStateService_AppEventStream);
};


/**
 * @param {!proto.spacemesh.v1.AppEventStreamRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.spacemesh.v1.AppEventStreamResponse>}
 *     The XHR Node Readable Stream
 */
proto.spacemesh.v1.GlobalStateServicePromiseClient.prototype.appEventStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/spacemesh.v1.GlobalStateService/AppEventStream',
      request,
      metadata || {},
      methodDescriptor_GlobalStateService_AppEventStream);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.spacemesh.v1.GlobalStateStreamRequest,
 *   !proto.spacemesh.v1.GlobalStateStreamResponse>}
 */
const methodDescriptor_GlobalStateService_GlobalStateStream = new grpc.web.MethodDescriptor(
  '/spacemesh.v1.GlobalStateService/GlobalStateStream',
  grpc.web.MethodType.SERVER_STREAMING,
  spacemesh_v1_global_state_types_pb.GlobalStateStreamRequest,
  spacemesh_v1_global_state_types_pb.GlobalStateStreamResponse,
  /**
   * @param {!proto.spacemesh.v1.GlobalStateStreamRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  spacemesh_v1_global_state_types_pb.GlobalStateStreamResponse.deserializeBinary
);


/**
 * @param {!proto.spacemesh.v1.GlobalStateStreamRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.spacemesh.v1.GlobalStateStreamResponse>}
 *     The XHR Node Readable Stream
 */
proto.spacemesh.v1.GlobalStateServiceClient.prototype.globalStateStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/spacemesh.v1.GlobalStateService/GlobalStateStream',
      request,
      metadata || {},
      methodDescriptor_GlobalStateService_GlobalStateStream);
};


/**
 * @param {!proto.spacemesh.v1.GlobalStateStreamRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.spacemesh.v1.GlobalStateStreamResponse>}
 *     The XHR Node Readable Stream
 */
proto.spacemesh.v1.GlobalStateServicePromiseClient.prototype.globalStateStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/spacemesh.v1.GlobalStateService/GlobalStateStream',
      request,
      metadata || {},
      methodDescriptor_GlobalStateService_GlobalStateStream);
};


module.exports = proto.spacemesh.v1;

