// source: spacemesh/v1/tx_types.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_rpc_status_pb = require('../../google/rpc/status_pb.js');
goog.object.extend(proto, google_rpc_status_pb);
var spacemesh_v1_types_pb = require('../../spacemesh/v1/types_pb.js');
goog.object.extend(proto, spacemesh_v1_types_pb);
goog.exportSymbol('proto.spacemesh.v1.SubmitTransactionRequest', null, global);
goog.exportSymbol('proto.spacemesh.v1.SubmitTransactionResponse', null, global);
goog.exportSymbol('proto.spacemesh.v1.TransactionResult', null, global);
goog.exportSymbol('proto.spacemesh.v1.TransactionResult.Status', null, global);
goog.exportSymbol('proto.spacemesh.v1.TransactionResultsRequest', null, global);
goog.exportSymbol('proto.spacemesh.v1.TransactionState', null, global);
goog.exportSymbol('proto.spacemesh.v1.TransactionState.TransactionState', null, global);
goog.exportSymbol('proto.spacemesh.v1.TransactionsIds', null, global);
goog.exportSymbol('proto.spacemesh.v1.TransactionsStateRequest', null, global);
goog.exportSymbol('proto.spacemesh.v1.TransactionsStateResponse', null, global);
goog.exportSymbol('proto.spacemesh.v1.TransactionsStateStreamRequest', null, global);
goog.exportSymbol('proto.spacemesh.v1.TransactionsStateStreamResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.TransactionsIds = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.spacemesh.v1.TransactionsIds.repeatedFields_, null);
};
goog.inherits(proto.spacemesh.v1.TransactionsIds, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spacemesh.v1.TransactionsIds.displayName = 'proto.spacemesh.v1.TransactionsIds';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.SubmitTransactionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.SubmitTransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spacemesh.v1.SubmitTransactionRequest.displayName = 'proto.spacemesh.v1.SubmitTransactionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.SubmitTransactionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.SubmitTransactionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spacemesh.v1.SubmitTransactionResponse.displayName = 'proto.spacemesh.v1.SubmitTransactionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.TransactionsStateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.spacemesh.v1.TransactionsStateRequest.repeatedFields_, null);
};
goog.inherits(proto.spacemesh.v1.TransactionsStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spacemesh.v1.TransactionsStateRequest.displayName = 'proto.spacemesh.v1.TransactionsStateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.TransactionsStateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.spacemesh.v1.TransactionsStateResponse.repeatedFields_, null);
};
goog.inherits(proto.spacemesh.v1.TransactionsStateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spacemesh.v1.TransactionsStateResponse.displayName = 'proto.spacemesh.v1.TransactionsStateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.TransactionsStateStreamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.spacemesh.v1.TransactionsStateStreamRequest.repeatedFields_, null);
};
goog.inherits(proto.spacemesh.v1.TransactionsStateStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spacemesh.v1.TransactionsStateStreamRequest.displayName = 'proto.spacemesh.v1.TransactionsStateStreamRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.TransactionsStateStreamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.TransactionsStateStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spacemesh.v1.TransactionsStateStreamResponse.displayName = 'proto.spacemesh.v1.TransactionsStateStreamResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.TransactionState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.TransactionState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spacemesh.v1.TransactionState.displayName = 'proto.spacemesh.v1.TransactionState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.TransactionResultsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.TransactionResultsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spacemesh.v1.TransactionResultsRequest.displayName = 'proto.spacemesh.v1.TransactionResultsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.TransactionResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.spacemesh.v1.TransactionResult.repeatedFields_, null);
};
goog.inherits(proto.spacemesh.v1.TransactionResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spacemesh.v1.TransactionResult.displayName = 'proto.spacemesh.v1.TransactionResult';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.spacemesh.v1.TransactionsIds.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.TransactionsIds.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.TransactionsIds.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.TransactionsIds} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.TransactionsIds.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionIdList: jspb.Message.toObjectList(msg.getTransactionIdList(),
    spacemesh_v1_types_pb.TransactionId.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.TransactionsIds}
 */
proto.spacemesh.v1.TransactionsIds.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.TransactionsIds;
  return proto.spacemesh.v1.TransactionsIds.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.TransactionsIds} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.TransactionsIds}
 */
proto.spacemesh.v1.TransactionsIds.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new spacemesh_v1_types_pb.TransactionId;
      reader.readMessage(value,spacemesh_v1_types_pb.TransactionId.deserializeBinaryFromReader);
      msg.addTransactionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.TransactionsIds.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.TransactionsIds.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.TransactionsIds} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.TransactionsIds.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionIdList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      spacemesh_v1_types_pb.TransactionId.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TransactionId transaction_id = 1;
 * @return {!Array<!proto.spacemesh.v1.TransactionId>}
 */
proto.spacemesh.v1.TransactionsIds.prototype.getTransactionIdList = function() {
  return /** @type{!Array<!proto.spacemesh.v1.TransactionId>} */ (
    jspb.Message.getRepeatedWrapperField(this, spacemesh_v1_types_pb.TransactionId, 1));
};


/**
 * @param {!Array<!proto.spacemesh.v1.TransactionId>} value
 * @return {!proto.spacemesh.v1.TransactionsIds} returns this
*/
proto.spacemesh.v1.TransactionsIds.prototype.setTransactionIdList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.spacemesh.v1.TransactionId=} opt_value
 * @param {number=} opt_index
 * @return {!proto.spacemesh.v1.TransactionId}
 */
proto.spacemesh.v1.TransactionsIds.prototype.addTransactionId = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.spacemesh.v1.TransactionId, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.spacemesh.v1.TransactionsIds} returns this
 */
proto.spacemesh.v1.TransactionsIds.prototype.clearTransactionIdList = function() {
  return this.setTransactionIdList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.SubmitTransactionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.SubmitTransactionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.SubmitTransactionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SubmitTransactionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    transaction: msg.getTransaction_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.SubmitTransactionRequest}
 */
proto.spacemesh.v1.SubmitTransactionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.SubmitTransactionRequest;
  return proto.spacemesh.v1.SubmitTransactionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.SubmitTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.SubmitTransactionRequest}
 */
proto.spacemesh.v1.SubmitTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.SubmitTransactionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.SubmitTransactionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.SubmitTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SubmitTransactionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransaction_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes transaction = 1;
 * @return {string}
 */
proto.spacemesh.v1.SubmitTransactionRequest.prototype.getTransaction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes transaction = 1;
 * This is a type-conversion wrapper around `getTransaction()`
 * @return {string}
 */
proto.spacemesh.v1.SubmitTransactionRequest.prototype.getTransaction_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransaction()));
};


/**
 * optional bytes transaction = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransaction()`
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.SubmitTransactionRequest.prototype.getTransaction_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransaction()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.spacemesh.v1.SubmitTransactionRequest} returns this
 */
proto.spacemesh.v1.SubmitTransactionRequest.prototype.setTransaction = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.SubmitTransactionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.SubmitTransactionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.SubmitTransactionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SubmitTransactionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && google_rpc_status_pb.Status.toObject(includeInstance, f),
    txstate: (f = msg.getTxstate()) && proto.spacemesh.v1.TransactionState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.SubmitTransactionResponse}
 */
proto.spacemesh.v1.SubmitTransactionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.SubmitTransactionResponse;
  return proto.spacemesh.v1.SubmitTransactionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.SubmitTransactionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.SubmitTransactionResponse}
 */
proto.spacemesh.v1.SubmitTransactionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_rpc_status_pb.Status;
      reader.readMessage(value,google_rpc_status_pb.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new proto.spacemesh.v1.TransactionState;
      reader.readMessage(value,proto.spacemesh.v1.TransactionState.deserializeBinaryFromReader);
      msg.setTxstate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.SubmitTransactionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.SubmitTransactionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.SubmitTransactionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SubmitTransactionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_rpc_status_pb.Status.serializeBinaryToWriter
    );
  }
  f = message.getTxstate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.spacemesh.v1.TransactionState.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.rpc.Status status = 1;
 * @return {?proto.google.rpc.Status}
 */
proto.spacemesh.v1.SubmitTransactionResponse.prototype.getStatus = function() {
  return /** @type{?proto.google.rpc.Status} */ (
    jspb.Message.getWrapperField(this, google_rpc_status_pb.Status, 1));
};


/**
 * @param {?proto.google.rpc.Status|undefined} value
 * @return {!proto.spacemesh.v1.SubmitTransactionResponse} returns this
*/
proto.spacemesh.v1.SubmitTransactionResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.spacemesh.v1.SubmitTransactionResponse} returns this
 */
proto.spacemesh.v1.SubmitTransactionResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.spacemesh.v1.SubmitTransactionResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TransactionState txstate = 2;
 * @return {?proto.spacemesh.v1.TransactionState}
 */
proto.spacemesh.v1.SubmitTransactionResponse.prototype.getTxstate = function() {
  return /** @type{?proto.spacemesh.v1.TransactionState} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.TransactionState, 2));
};


/**
 * @param {?proto.spacemesh.v1.TransactionState|undefined} value
 * @return {!proto.spacemesh.v1.SubmitTransactionResponse} returns this
*/
proto.spacemesh.v1.SubmitTransactionResponse.prototype.setTxstate = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.spacemesh.v1.SubmitTransactionResponse} returns this
 */
proto.spacemesh.v1.SubmitTransactionResponse.prototype.clearTxstate = function() {
  return this.setTxstate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.spacemesh.v1.SubmitTransactionResponse.prototype.hasTxstate = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.spacemesh.v1.TransactionsStateRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.TransactionsStateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.TransactionsStateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.TransactionsStateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.TransactionsStateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionIdList: jspb.Message.toObjectList(msg.getTransactionIdList(),
    spacemesh_v1_types_pb.TransactionId.toObject, includeInstance),
    includeTransactions: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.TransactionsStateRequest}
 */
proto.spacemesh.v1.TransactionsStateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.TransactionsStateRequest;
  return proto.spacemesh.v1.TransactionsStateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.TransactionsStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.TransactionsStateRequest}
 */
proto.spacemesh.v1.TransactionsStateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new spacemesh_v1_types_pb.TransactionId;
      reader.readMessage(value,spacemesh_v1_types_pb.TransactionId.deserializeBinaryFromReader);
      msg.addTransactionId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeTransactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.TransactionsStateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.TransactionsStateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.TransactionsStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.TransactionsStateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionIdList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      spacemesh_v1_types_pb.TransactionId.serializeBinaryToWriter
    );
  }
  f = message.getIncludeTransactions();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * repeated TransactionId transaction_id = 1;
 * @return {!Array<!proto.spacemesh.v1.TransactionId>}
 */
proto.spacemesh.v1.TransactionsStateRequest.prototype.getTransactionIdList = function() {
  return /** @type{!Array<!proto.spacemesh.v1.TransactionId>} */ (
    jspb.Message.getRepeatedWrapperField(this, spacemesh_v1_types_pb.TransactionId, 1));
};


/**
 * @param {!Array<!proto.spacemesh.v1.TransactionId>} value
 * @return {!proto.spacemesh.v1.TransactionsStateRequest} returns this
*/
proto.spacemesh.v1.TransactionsStateRequest.prototype.setTransactionIdList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.spacemesh.v1.TransactionId=} opt_value
 * @param {number=} opt_index
 * @return {!proto.spacemesh.v1.TransactionId}
 */
proto.spacemesh.v1.TransactionsStateRequest.prototype.addTransactionId = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.spacemesh.v1.TransactionId, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.spacemesh.v1.TransactionsStateRequest} returns this
 */
proto.spacemesh.v1.TransactionsStateRequest.prototype.clearTransactionIdList = function() {
  return this.setTransactionIdList([]);
};


/**
 * optional bool include_transactions = 2;
 * @return {boolean}
 */
proto.spacemesh.v1.TransactionsStateRequest.prototype.getIncludeTransactions = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.spacemesh.v1.TransactionsStateRequest} returns this
 */
proto.spacemesh.v1.TransactionsStateRequest.prototype.setIncludeTransactions = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.spacemesh.v1.TransactionsStateResponse.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.TransactionsStateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.TransactionsStateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.TransactionsStateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.TransactionsStateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionsStateList: jspb.Message.toObjectList(msg.getTransactionsStateList(),
    proto.spacemesh.v1.TransactionState.toObject, includeInstance),
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    spacemesh_v1_types_pb.Transaction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.TransactionsStateResponse}
 */
proto.spacemesh.v1.TransactionsStateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.TransactionsStateResponse;
  return proto.spacemesh.v1.TransactionsStateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.TransactionsStateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.TransactionsStateResponse}
 */
proto.spacemesh.v1.TransactionsStateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.spacemesh.v1.TransactionState;
      reader.readMessage(value,proto.spacemesh.v1.TransactionState.deserializeBinaryFromReader);
      msg.addTransactionsState(value);
      break;
    case 2:
      var value = new spacemesh_v1_types_pb.Transaction;
      reader.readMessage(value,spacemesh_v1_types_pb.Transaction.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.TransactionsStateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.TransactionsStateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.TransactionsStateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.TransactionsStateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionsStateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.spacemesh.v1.TransactionState.serializeBinaryToWriter
    );
  }
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      spacemesh_v1_types_pb.Transaction.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TransactionState transactions_state = 1;
 * @return {!Array<!proto.spacemesh.v1.TransactionState>}
 */
proto.spacemesh.v1.TransactionsStateResponse.prototype.getTransactionsStateList = function() {
  return /** @type{!Array<!proto.spacemesh.v1.TransactionState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.spacemesh.v1.TransactionState, 1));
};


/**
 * @param {!Array<!proto.spacemesh.v1.TransactionState>} value
 * @return {!proto.spacemesh.v1.TransactionsStateResponse} returns this
*/
proto.spacemesh.v1.TransactionsStateResponse.prototype.setTransactionsStateList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.spacemesh.v1.TransactionState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.spacemesh.v1.TransactionState}
 */
proto.spacemesh.v1.TransactionsStateResponse.prototype.addTransactionsState = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.spacemesh.v1.TransactionState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.spacemesh.v1.TransactionsStateResponse} returns this
 */
proto.spacemesh.v1.TransactionsStateResponse.prototype.clearTransactionsStateList = function() {
  return this.setTransactionsStateList([]);
};


/**
 * repeated Transaction transactions = 2;
 * @return {!Array<!proto.spacemesh.v1.Transaction>}
 */
proto.spacemesh.v1.TransactionsStateResponse.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.spacemesh.v1.Transaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, spacemesh_v1_types_pb.Transaction, 2));
};


/**
 * @param {!Array<!proto.spacemesh.v1.Transaction>} value
 * @return {!proto.spacemesh.v1.TransactionsStateResponse} returns this
*/
proto.spacemesh.v1.TransactionsStateResponse.prototype.setTransactionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.spacemesh.v1.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.spacemesh.v1.Transaction}
 */
proto.spacemesh.v1.TransactionsStateResponse.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.spacemesh.v1.Transaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.spacemesh.v1.TransactionsStateResponse} returns this
 */
proto.spacemesh.v1.TransactionsStateResponse.prototype.clearTransactionsList = function() {
  return this.setTransactionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.spacemesh.v1.TransactionsStateStreamRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.TransactionsStateStreamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.TransactionsStateStreamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.TransactionsStateStreamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.TransactionsStateStreamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionIdList: jspb.Message.toObjectList(msg.getTransactionIdList(),
    spacemesh_v1_types_pb.TransactionId.toObject, includeInstance),
    includeTransactions: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.TransactionsStateStreamRequest}
 */
proto.spacemesh.v1.TransactionsStateStreamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.TransactionsStateStreamRequest;
  return proto.spacemesh.v1.TransactionsStateStreamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.TransactionsStateStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.TransactionsStateStreamRequest}
 */
proto.spacemesh.v1.TransactionsStateStreamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new spacemesh_v1_types_pb.TransactionId;
      reader.readMessage(value,spacemesh_v1_types_pb.TransactionId.deserializeBinaryFromReader);
      msg.addTransactionId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeTransactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.TransactionsStateStreamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.TransactionsStateStreamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.TransactionsStateStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.TransactionsStateStreamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionIdList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      spacemesh_v1_types_pb.TransactionId.serializeBinaryToWriter
    );
  }
  f = message.getIncludeTransactions();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * repeated TransactionId transaction_id = 1;
 * @return {!Array<!proto.spacemesh.v1.TransactionId>}
 */
proto.spacemesh.v1.TransactionsStateStreamRequest.prototype.getTransactionIdList = function() {
  return /** @type{!Array<!proto.spacemesh.v1.TransactionId>} */ (
    jspb.Message.getRepeatedWrapperField(this, spacemesh_v1_types_pb.TransactionId, 1));
};


/**
 * @param {!Array<!proto.spacemesh.v1.TransactionId>} value
 * @return {!proto.spacemesh.v1.TransactionsStateStreamRequest} returns this
*/
proto.spacemesh.v1.TransactionsStateStreamRequest.prototype.setTransactionIdList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.spacemesh.v1.TransactionId=} opt_value
 * @param {number=} opt_index
 * @return {!proto.spacemesh.v1.TransactionId}
 */
proto.spacemesh.v1.TransactionsStateStreamRequest.prototype.addTransactionId = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.spacemesh.v1.TransactionId, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.spacemesh.v1.TransactionsStateStreamRequest} returns this
 */
proto.spacemesh.v1.TransactionsStateStreamRequest.prototype.clearTransactionIdList = function() {
  return this.setTransactionIdList([]);
};


/**
 * optional bool include_transactions = 2;
 * @return {boolean}
 */
proto.spacemesh.v1.TransactionsStateStreamRequest.prototype.getIncludeTransactions = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.spacemesh.v1.TransactionsStateStreamRequest} returns this
 */
proto.spacemesh.v1.TransactionsStateStreamRequest.prototype.setIncludeTransactions = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.TransactionsStateStreamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.TransactionsStateStreamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.TransactionsStateStreamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.TransactionsStateStreamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionState: (f = msg.getTransactionState()) && proto.spacemesh.v1.TransactionState.toObject(includeInstance, f),
    transaction: (f = msg.getTransaction()) && spacemesh_v1_types_pb.Transaction.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.TransactionsStateStreamResponse}
 */
proto.spacemesh.v1.TransactionsStateStreamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.TransactionsStateStreamResponse;
  return proto.spacemesh.v1.TransactionsStateStreamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.TransactionsStateStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.TransactionsStateStreamResponse}
 */
proto.spacemesh.v1.TransactionsStateStreamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.spacemesh.v1.TransactionState;
      reader.readMessage(value,proto.spacemesh.v1.TransactionState.deserializeBinaryFromReader);
      msg.setTransactionState(value);
      break;
    case 2:
      var value = new spacemesh_v1_types_pb.Transaction;
      reader.readMessage(value,spacemesh_v1_types_pb.Transaction.deserializeBinaryFromReader);
      msg.setTransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.TransactionsStateStreamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.TransactionsStateStreamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.TransactionsStateStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.TransactionsStateStreamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.spacemesh.v1.TransactionState.serializeBinaryToWriter
    );
  }
  f = message.getTransaction();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      spacemesh_v1_types_pb.Transaction.serializeBinaryToWriter
    );
  }
};


/**
 * optional TransactionState transaction_state = 1;
 * @return {?proto.spacemesh.v1.TransactionState}
 */
proto.spacemesh.v1.TransactionsStateStreamResponse.prototype.getTransactionState = function() {
  return /** @type{?proto.spacemesh.v1.TransactionState} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.TransactionState, 1));
};


/**
 * @param {?proto.spacemesh.v1.TransactionState|undefined} value
 * @return {!proto.spacemesh.v1.TransactionsStateStreamResponse} returns this
*/
proto.spacemesh.v1.TransactionsStateStreamResponse.prototype.setTransactionState = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.spacemesh.v1.TransactionsStateStreamResponse} returns this
 */
proto.spacemesh.v1.TransactionsStateStreamResponse.prototype.clearTransactionState = function() {
  return this.setTransactionState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.spacemesh.v1.TransactionsStateStreamResponse.prototype.hasTransactionState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Transaction transaction = 2;
 * @return {?proto.spacemesh.v1.Transaction}
 */
proto.spacemesh.v1.TransactionsStateStreamResponse.prototype.getTransaction = function() {
  return /** @type{?proto.spacemesh.v1.Transaction} */ (
    jspb.Message.getWrapperField(this, spacemesh_v1_types_pb.Transaction, 2));
};


/**
 * @param {?proto.spacemesh.v1.Transaction|undefined} value
 * @return {!proto.spacemesh.v1.TransactionsStateStreamResponse} returns this
*/
proto.spacemesh.v1.TransactionsStateStreamResponse.prototype.setTransaction = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.spacemesh.v1.TransactionsStateStreamResponse} returns this
 */
proto.spacemesh.v1.TransactionsStateStreamResponse.prototype.clearTransaction = function() {
  return this.setTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.spacemesh.v1.TransactionsStateStreamResponse.prototype.hasTransaction = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.TransactionState.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.TransactionState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.TransactionState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.TransactionState.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && spacemesh_v1_types_pb.TransactionId.toObject(includeInstance, f),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.TransactionState}
 */
proto.spacemesh.v1.TransactionState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.TransactionState;
  return proto.spacemesh.v1.TransactionState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.TransactionState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.TransactionState}
 */
proto.spacemesh.v1.TransactionState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new spacemesh_v1_types_pb.TransactionId;
      reader.readMessage(value,spacemesh_v1_types_pb.TransactionId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.spacemesh.v1.TransactionState.TransactionState} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.TransactionState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.TransactionState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.TransactionState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.TransactionState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      spacemesh_v1_types_pb.TransactionId.serializeBinaryToWriter
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.spacemesh.v1.TransactionState.TransactionState = {
  TRANSACTION_STATE_UNSPECIFIED: 0,
  TRANSACTION_STATE_REJECTED: 1,
  TRANSACTION_STATE_INSUFFICIENT_FUNDS: 2,
  TRANSACTION_STATE_CONFLICTING: 3,
  TRANSACTION_STATE_MEMPOOL: 4,
  TRANSACTION_STATE_MESH: 5,
  TRANSACTION_STATE_PROCESSED: 6
};

/**
 * optional TransactionId id = 1;
 * @return {?proto.spacemesh.v1.TransactionId}
 */
proto.spacemesh.v1.TransactionState.prototype.getId = function() {
  return /** @type{?proto.spacemesh.v1.TransactionId} */ (
    jspb.Message.getWrapperField(this, spacemesh_v1_types_pb.TransactionId, 1));
};


/**
 * @param {?proto.spacemesh.v1.TransactionId|undefined} value
 * @return {!proto.spacemesh.v1.TransactionState} returns this
*/
proto.spacemesh.v1.TransactionState.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.spacemesh.v1.TransactionState} returns this
 */
proto.spacemesh.v1.TransactionState.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.spacemesh.v1.TransactionState.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TransactionState state = 2;
 * @return {!proto.spacemesh.v1.TransactionState.TransactionState}
 */
proto.spacemesh.v1.TransactionState.prototype.getState = function() {
  return /** @type {!proto.spacemesh.v1.TransactionState.TransactionState} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.spacemesh.v1.TransactionState.TransactionState} value
 * @return {!proto.spacemesh.v1.TransactionState} returns this
 */
proto.spacemesh.v1.TransactionState.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.TransactionResultsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.TransactionResultsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.TransactionResultsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.TransactionResultsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    address: jspb.Message.getFieldWithDefault(msg, 2, ""),
    start: jspb.Message.getFieldWithDefault(msg, 3, 0),
    end: jspb.Message.getFieldWithDefault(msg, 4, 0),
    watch: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.TransactionResultsRequest}
 */
proto.spacemesh.v1.TransactionResultsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.TransactionResultsRequest;
  return proto.spacemesh.v1.TransactionResultsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.TransactionResultsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.TransactionResultsRequest}
 */
proto.spacemesh.v1.TransactionResultsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStart(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEnd(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWatch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.TransactionResultsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.TransactionResultsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.TransactionResultsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.TransactionResultsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStart();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getEnd();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getWatch();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {string}
 */
proto.spacemesh.v1.TransactionResultsRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.spacemesh.v1.TransactionResultsRequest.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.TransactionResultsRequest.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.spacemesh.v1.TransactionResultsRequest} returns this
 */
proto.spacemesh.v1.TransactionResultsRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.spacemesh.v1.TransactionResultsRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.spacemesh.v1.TransactionResultsRequest} returns this
 */
proto.spacemesh.v1.TransactionResultsRequest.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 start = 3;
 * @return {number}
 */
proto.spacemesh.v1.TransactionResultsRequest.prototype.getStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.spacemesh.v1.TransactionResultsRequest} returns this
 */
proto.spacemesh.v1.TransactionResultsRequest.prototype.setStart = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 end = 4;
 * @return {number}
 */
proto.spacemesh.v1.TransactionResultsRequest.prototype.getEnd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.spacemesh.v1.TransactionResultsRequest} returns this
 */
proto.spacemesh.v1.TransactionResultsRequest.prototype.setEnd = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool watch = 5;
 * @return {boolean}
 */
proto.spacemesh.v1.TransactionResultsRequest.prototype.getWatch = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.spacemesh.v1.TransactionResultsRequest} returns this
 */
proto.spacemesh.v1.TransactionResultsRequest.prototype.setWatch = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.spacemesh.v1.TransactionResult.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.TransactionResult.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.TransactionResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.TransactionResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.TransactionResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    tx: (f = msg.getTx()) && spacemesh_v1_types_pb.Transaction.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    message: jspb.Message.getFieldWithDefault(msg, 3, ""),
    gasConsumed: jspb.Message.getFieldWithDefault(msg, 4, 0),
    fee: jspb.Message.getFieldWithDefault(msg, 5, 0),
    block: msg.getBlock_asB64(),
    layer: jspb.Message.getFieldWithDefault(msg, 7, 0),
    touchedAddressesList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.TransactionResult}
 */
proto.spacemesh.v1.TransactionResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.TransactionResult;
  return proto.spacemesh.v1.TransactionResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.TransactionResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.TransactionResult}
 */
proto.spacemesh.v1.TransactionResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new spacemesh_v1_types_pb.Transaction;
      reader.readMessage(value,spacemesh_v1_types_pb.Transaction.deserializeBinaryFromReader);
      msg.setTx(value);
      break;
    case 2:
      var value = /** @type {!proto.spacemesh.v1.TransactionResult.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasConsumed(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFee(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlock(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLayer(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addTouchedAddresses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.TransactionResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.TransactionResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.TransactionResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.TransactionResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTx();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      spacemesh_v1_types_pb.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGasConsumed();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getFee();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getBlock_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getLayer();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getTouchedAddressesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.spacemesh.v1.TransactionResult.Status = {
  SUCCESS: 0,
  FAILURE: 1,
  INVALID: 2
};

/**
 * optional Transaction tx = 1;
 * @return {?proto.spacemesh.v1.Transaction}
 */
proto.spacemesh.v1.TransactionResult.prototype.getTx = function() {
  return /** @type{?proto.spacemesh.v1.Transaction} */ (
    jspb.Message.getWrapperField(this, spacemesh_v1_types_pb.Transaction, 1));
};


/**
 * @param {?proto.spacemesh.v1.Transaction|undefined} value
 * @return {!proto.spacemesh.v1.TransactionResult} returns this
*/
proto.spacemesh.v1.TransactionResult.prototype.setTx = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.spacemesh.v1.TransactionResult} returns this
 */
proto.spacemesh.v1.TransactionResult.prototype.clearTx = function() {
  return this.setTx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.spacemesh.v1.TransactionResult.prototype.hasTx = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Status status = 2;
 * @return {!proto.spacemesh.v1.TransactionResult.Status}
 */
proto.spacemesh.v1.TransactionResult.prototype.getStatus = function() {
  return /** @type {!proto.spacemesh.v1.TransactionResult.Status} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.spacemesh.v1.TransactionResult.Status} value
 * @return {!proto.spacemesh.v1.TransactionResult} returns this
 */
proto.spacemesh.v1.TransactionResult.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.spacemesh.v1.TransactionResult.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.spacemesh.v1.TransactionResult} returns this
 */
proto.spacemesh.v1.TransactionResult.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 gas_consumed = 4;
 * @return {number}
 */
proto.spacemesh.v1.TransactionResult.prototype.getGasConsumed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.spacemesh.v1.TransactionResult} returns this
 */
proto.spacemesh.v1.TransactionResult.prototype.setGasConsumed = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 fee = 5;
 * @return {number}
 */
proto.spacemesh.v1.TransactionResult.prototype.getFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.spacemesh.v1.TransactionResult} returns this
 */
proto.spacemesh.v1.TransactionResult.prototype.setFee = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bytes block = 6;
 * @return {string}
 */
proto.spacemesh.v1.TransactionResult.prototype.getBlock = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes block = 6;
 * This is a type-conversion wrapper around `getBlock()`
 * @return {string}
 */
proto.spacemesh.v1.TransactionResult.prototype.getBlock_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlock()));
};


/**
 * optional bytes block = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlock()`
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.TransactionResult.prototype.getBlock_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlock()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.spacemesh.v1.TransactionResult} returns this
 */
proto.spacemesh.v1.TransactionResult.prototype.setBlock = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional uint32 layer = 7;
 * @return {number}
 */
proto.spacemesh.v1.TransactionResult.prototype.getLayer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.spacemesh.v1.TransactionResult} returns this
 */
proto.spacemesh.v1.TransactionResult.prototype.setLayer = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * repeated string touched_addresses = 8;
 * @return {!Array<string>}
 */
proto.spacemesh.v1.TransactionResult.prototype.getTouchedAddressesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.spacemesh.v1.TransactionResult} returns this
 */
proto.spacemesh.v1.TransactionResult.prototype.setTouchedAddressesList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.spacemesh.v1.TransactionResult} returns this
 */
proto.spacemesh.v1.TransactionResult.prototype.addTouchedAddresses = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.spacemesh.v1.TransactionResult} returns this
 */
proto.spacemesh.v1.TransactionResult.prototype.clearTouchedAddressesList = function() {
  return this.setTouchedAddressesList([]);
};


goog.object.extend(exports, proto.spacemesh.v1);
