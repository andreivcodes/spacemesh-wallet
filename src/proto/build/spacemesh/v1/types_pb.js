// source: spacemesh/v1/types.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.spacemesh.v1.AccountId', null, global);
goog.exportSymbol('proto.spacemesh.v1.Activation', null, global);
goog.exportSymbol('proto.spacemesh.v1.ActivationId', null, global);
goog.exportSymbol('proto.spacemesh.v1.Amount', null, global);
goog.exportSymbol('proto.spacemesh.v1.AppEvent', null, global);
goog.exportSymbol('proto.spacemesh.v1.Block', null, global);
goog.exportSymbol('proto.spacemesh.v1.Layer', null, global);
goog.exportSymbol('proto.spacemesh.v1.Layer.LayerStatus', null, global);
goog.exportSymbol('proto.spacemesh.v1.LayerLimits', null, global);
goog.exportSymbol('proto.spacemesh.v1.LayerNumber', null, global);
goog.exportSymbol('proto.spacemesh.v1.MeshTransaction', null, global);
goog.exportSymbol('proto.spacemesh.v1.Nonce', null, global);
goog.exportSymbol('proto.spacemesh.v1.Reward', null, global);
goog.exportSymbol('proto.spacemesh.v1.SimpleInt', null, global);
goog.exportSymbol('proto.spacemesh.v1.SimpleString', null, global);
goog.exportSymbol('proto.spacemesh.v1.SmesherId', null, global);
goog.exportSymbol('proto.spacemesh.v1.Transaction', null, global);
goog.exportSymbol('proto.spacemesh.v1.TransactionId', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.SimpleInt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.SimpleInt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spacemesh.v1.SimpleInt.displayName = 'proto.spacemesh.v1.SimpleInt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.SimpleString = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.SimpleString, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spacemesh.v1.SimpleString.displayName = 'proto.spacemesh.v1.SimpleString';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.Amount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.Amount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spacemesh.v1.Amount.displayName = 'proto.spacemesh.v1.Amount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.AccountId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.AccountId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spacemesh.v1.AccountId.displayName = 'proto.spacemesh.v1.AccountId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.TransactionId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.TransactionId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spacemesh.v1.TransactionId.displayName = 'proto.spacemesh.v1.TransactionId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.ActivationId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.ActivationId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spacemesh.v1.ActivationId.displayName = 'proto.spacemesh.v1.ActivationId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.SmesherId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.SmesherId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spacemesh.v1.SmesherId.displayName = 'proto.spacemesh.v1.SmesherId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.Activation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.Activation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spacemesh.v1.Activation.displayName = 'proto.spacemesh.v1.Activation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spacemesh.v1.Transaction.displayName = 'proto.spacemesh.v1.Transaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.LayerLimits = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.LayerLimits, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spacemesh.v1.LayerLimits.displayName = 'proto.spacemesh.v1.LayerLimits';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.Nonce = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.Nonce, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spacemesh.v1.Nonce.displayName = 'proto.spacemesh.v1.Nonce';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.MeshTransaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.MeshTransaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spacemesh.v1.MeshTransaction.displayName = 'proto.spacemesh.v1.MeshTransaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.Reward = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.Reward, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spacemesh.v1.Reward.displayName = 'proto.spacemesh.v1.Reward';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.spacemesh.v1.Block.repeatedFields_, null);
};
goog.inherits(proto.spacemesh.v1.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spacemesh.v1.Block.displayName = 'proto.spacemesh.v1.Block';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.Layer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.spacemesh.v1.Layer.repeatedFields_, null);
};
goog.inherits(proto.spacemesh.v1.Layer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spacemesh.v1.Layer.displayName = 'proto.spacemesh.v1.Layer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.LayerNumber = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.LayerNumber, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spacemesh.v1.LayerNumber.displayName = 'proto.spacemesh.v1.LayerNumber';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.spacemesh.v1.AppEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.spacemesh.v1.AppEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.spacemesh.v1.AppEvent.displayName = 'proto.spacemesh.v1.AppEvent';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.SimpleInt.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.SimpleInt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.SimpleInt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SimpleInt.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.SimpleInt}
 */
proto.spacemesh.v1.SimpleInt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.SimpleInt;
  return proto.spacemesh.v1.SimpleInt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.SimpleInt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.SimpleInt}
 */
proto.spacemesh.v1.SimpleInt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.SimpleInt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.SimpleInt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.SimpleInt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SimpleInt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 value = 1;
 * @return {number}
 */
proto.spacemesh.v1.SimpleInt.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.spacemesh.v1.SimpleInt} returns this
 */
proto.spacemesh.v1.SimpleInt.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.SimpleString.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.SimpleString.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.SimpleString} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SimpleString.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.SimpleString}
 */
proto.spacemesh.v1.SimpleString.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.SimpleString;
  return proto.spacemesh.v1.SimpleString.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.SimpleString} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.SimpleString}
 */
proto.spacemesh.v1.SimpleString.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.SimpleString.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.SimpleString.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.SimpleString} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SimpleString.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.spacemesh.v1.SimpleString.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.spacemesh.v1.SimpleString} returns this
 */
proto.spacemesh.v1.SimpleString.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.Amount.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.Amount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.Amount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Amount.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.Amount}
 */
proto.spacemesh.v1.Amount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.Amount;
  return proto.spacemesh.v1.Amount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.Amount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.Amount}
 */
proto.spacemesh.v1.Amount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.Amount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.Amount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.Amount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Amount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 value = 1;
 * @return {number}
 */
proto.spacemesh.v1.Amount.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.spacemesh.v1.Amount} returns this
 */
proto.spacemesh.v1.Amount.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.AccountId.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.AccountId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.AccountId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.AccountId.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.AccountId}
 */
proto.spacemesh.v1.AccountId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.AccountId;
  return proto.spacemesh.v1.AccountId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.AccountId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.AccountId}
 */
proto.spacemesh.v1.AccountId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.AccountId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.AccountId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.AccountId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.AccountId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.spacemesh.v1.AccountId.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.spacemesh.v1.AccountId} returns this
 */
proto.spacemesh.v1.AccountId.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.TransactionId.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.TransactionId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.TransactionId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.TransactionId.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.TransactionId}
 */
proto.spacemesh.v1.TransactionId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.TransactionId;
  return proto.spacemesh.v1.TransactionId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.TransactionId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.TransactionId}
 */
proto.spacemesh.v1.TransactionId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.TransactionId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.TransactionId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.TransactionId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.TransactionId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {string}
 */
proto.spacemesh.v1.TransactionId.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.spacemesh.v1.TransactionId.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.TransactionId.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.spacemesh.v1.TransactionId} returns this
 */
proto.spacemesh.v1.TransactionId.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.ActivationId.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.ActivationId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.ActivationId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.ActivationId.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.ActivationId}
 */
proto.spacemesh.v1.ActivationId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.ActivationId;
  return proto.spacemesh.v1.ActivationId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.ActivationId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.ActivationId}
 */
proto.spacemesh.v1.ActivationId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.ActivationId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.ActivationId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.ActivationId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.ActivationId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {string}
 */
proto.spacemesh.v1.ActivationId.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.spacemesh.v1.ActivationId.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.ActivationId.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.spacemesh.v1.ActivationId} returns this
 */
proto.spacemesh.v1.ActivationId.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.SmesherId.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.SmesherId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.SmesherId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SmesherId.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.SmesherId}
 */
proto.spacemesh.v1.SmesherId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.SmesherId;
  return proto.spacemesh.v1.SmesherId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.SmesherId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.SmesherId}
 */
proto.spacemesh.v1.SmesherId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.SmesherId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.SmesherId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.SmesherId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.SmesherId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {string}
 */
proto.spacemesh.v1.SmesherId.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.spacemesh.v1.SmesherId.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.SmesherId.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.spacemesh.v1.SmesherId} returns this
 */
proto.spacemesh.v1.SmesherId.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.Activation.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.Activation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.Activation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Activation.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = msg.getId()) && proto.spacemesh.v1.ActivationId.toObject(includeInstance, f),
    layer: (f = msg.getLayer()) && proto.spacemesh.v1.LayerNumber.toObject(includeInstance, f),
    smesherId: (f = msg.getSmesherId()) && proto.spacemesh.v1.SmesherId.toObject(includeInstance, f),
    coinbase: (f = msg.getCoinbase()) && proto.spacemesh.v1.AccountId.toObject(includeInstance, f),
    prevAtx: (f = msg.getPrevAtx()) && proto.spacemesh.v1.ActivationId.toObject(includeInstance, f),
    numUnits: jspb.Message.getFieldWithDefault(msg, 6, 0),
    sequence: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.Activation}
 */
proto.spacemesh.v1.Activation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.Activation;
  return proto.spacemesh.v1.Activation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.Activation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.Activation}
 */
proto.spacemesh.v1.Activation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.spacemesh.v1.ActivationId;
      reader.readMessage(value,proto.spacemesh.v1.ActivationId.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.spacemesh.v1.LayerNumber;
      reader.readMessage(value,proto.spacemesh.v1.LayerNumber.deserializeBinaryFromReader);
      msg.setLayer(value);
      break;
    case 3:
      var value = new proto.spacemesh.v1.SmesherId;
      reader.readMessage(value,proto.spacemesh.v1.SmesherId.deserializeBinaryFromReader);
      msg.setSmesherId(value);
      break;
    case 4:
      var value = new proto.spacemesh.v1.AccountId;
      reader.readMessage(value,proto.spacemesh.v1.AccountId.deserializeBinaryFromReader);
      msg.setCoinbase(value);
      break;
    case 5:
      var value = new proto.spacemesh.v1.ActivationId;
      reader.readMessage(value,proto.spacemesh.v1.ActivationId.deserializeBinaryFromReader);
      msg.setPrevAtx(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumUnits(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSequence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.Activation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.Activation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.Activation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Activation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.spacemesh.v1.ActivationId.serializeBinaryToWriter
    );
  }
  f = message.getLayer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.spacemesh.v1.LayerNumber.serializeBinaryToWriter
    );
  }
  f = message.getSmesherId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.spacemesh.v1.SmesherId.serializeBinaryToWriter
    );
  }
  f = message.getCoinbase();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.spacemesh.v1.AccountId.serializeBinaryToWriter
    );
  }
  f = message.getPrevAtx();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.spacemesh.v1.ActivationId.serializeBinaryToWriter
    );
  }
  f = message.getNumUnits();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * optional ActivationId id = 1;
 * @return {?proto.spacemesh.v1.ActivationId}
 */
proto.spacemesh.v1.Activation.prototype.getId = function() {
  return /** @type{?proto.spacemesh.v1.ActivationId} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.ActivationId, 1));
};


/**
 * @param {?proto.spacemesh.v1.ActivationId|undefined} value
 * @return {!proto.spacemesh.v1.Activation} returns this
*/
proto.spacemesh.v1.Activation.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.spacemesh.v1.Activation} returns this
 */
proto.spacemesh.v1.Activation.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.spacemesh.v1.Activation.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LayerNumber layer = 2;
 * @return {?proto.spacemesh.v1.LayerNumber}
 */
proto.spacemesh.v1.Activation.prototype.getLayer = function() {
  return /** @type{?proto.spacemesh.v1.LayerNumber} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.LayerNumber, 2));
};


/**
 * @param {?proto.spacemesh.v1.LayerNumber|undefined} value
 * @return {!proto.spacemesh.v1.Activation} returns this
*/
proto.spacemesh.v1.Activation.prototype.setLayer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.spacemesh.v1.Activation} returns this
 */
proto.spacemesh.v1.Activation.prototype.clearLayer = function() {
  return this.setLayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.spacemesh.v1.Activation.prototype.hasLayer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SmesherId smesher_id = 3;
 * @return {?proto.spacemesh.v1.SmesherId}
 */
proto.spacemesh.v1.Activation.prototype.getSmesherId = function() {
  return /** @type{?proto.spacemesh.v1.SmesherId} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.SmesherId, 3));
};


/**
 * @param {?proto.spacemesh.v1.SmesherId|undefined} value
 * @return {!proto.spacemesh.v1.Activation} returns this
*/
proto.spacemesh.v1.Activation.prototype.setSmesherId = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.spacemesh.v1.Activation} returns this
 */
proto.spacemesh.v1.Activation.prototype.clearSmesherId = function() {
  return this.setSmesherId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.spacemesh.v1.Activation.prototype.hasSmesherId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional AccountId coinbase = 4;
 * @return {?proto.spacemesh.v1.AccountId}
 */
proto.spacemesh.v1.Activation.prototype.getCoinbase = function() {
  return /** @type{?proto.spacemesh.v1.AccountId} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.AccountId, 4));
};


/**
 * @param {?proto.spacemesh.v1.AccountId|undefined} value
 * @return {!proto.spacemesh.v1.Activation} returns this
*/
proto.spacemesh.v1.Activation.prototype.setCoinbase = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.spacemesh.v1.Activation} returns this
 */
proto.spacemesh.v1.Activation.prototype.clearCoinbase = function() {
  return this.setCoinbase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.spacemesh.v1.Activation.prototype.hasCoinbase = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ActivationId prev_atx = 5;
 * @return {?proto.spacemesh.v1.ActivationId}
 */
proto.spacemesh.v1.Activation.prototype.getPrevAtx = function() {
  return /** @type{?proto.spacemesh.v1.ActivationId} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.ActivationId, 5));
};


/**
 * @param {?proto.spacemesh.v1.ActivationId|undefined} value
 * @return {!proto.spacemesh.v1.Activation} returns this
*/
proto.spacemesh.v1.Activation.prototype.setPrevAtx = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.spacemesh.v1.Activation} returns this
 */
proto.spacemesh.v1.Activation.prototype.clearPrevAtx = function() {
  return this.setPrevAtx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.spacemesh.v1.Activation.prototype.hasPrevAtx = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 num_units = 6;
 * @return {number}
 */
proto.spacemesh.v1.Activation.prototype.getNumUnits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.spacemesh.v1.Activation} returns this
 */
proto.spacemesh.v1.Activation.prototype.setNumUnits = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 sequence = 7;
 * @return {number}
 */
proto.spacemesh.v1.Activation.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.spacemesh.v1.Activation} returns this
 */
proto.spacemesh.v1.Activation.prototype.setSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    principal: (f = msg.getPrincipal()) && proto.spacemesh.v1.AccountId.toObject(includeInstance, f),
    template: (f = msg.getTemplate()) && proto.spacemesh.v1.AccountId.toObject(includeInstance, f),
    method: jspb.Message.getFieldWithDefault(msg, 4, 0),
    nonce: (f = msg.getNonce()) && proto.spacemesh.v1.Nonce.toObject(includeInstance, f),
    limits: (f = msg.getLimits()) && proto.spacemesh.v1.LayerLimits.toObject(includeInstance, f),
    maxGas: jspb.Message.getFieldWithDefault(msg, 7, 0),
    gasPrice: jspb.Message.getFieldWithDefault(msg, 8, 0),
    maxSpend: jspb.Message.getFieldWithDefault(msg, 9, 0),
    raw: msg.getRaw_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.Transaction}
 */
proto.spacemesh.v1.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.Transaction;
  return proto.spacemesh.v1.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.Transaction}
 */
proto.spacemesh.v1.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.spacemesh.v1.AccountId;
      reader.readMessage(value,proto.spacemesh.v1.AccountId.deserializeBinaryFromReader);
      msg.setPrincipal(value);
      break;
    case 3:
      var value = new proto.spacemesh.v1.AccountId;
      reader.readMessage(value,proto.spacemesh.v1.AccountId.deserializeBinaryFromReader);
      msg.setTemplate(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMethod(value);
      break;
    case 5:
      var value = new proto.spacemesh.v1.Nonce;
      reader.readMessage(value,proto.spacemesh.v1.Nonce.deserializeBinaryFromReader);
      msg.setNonce(value);
      break;
    case 6:
      var value = new proto.spacemesh.v1.LayerLimits;
      reader.readMessage(value,proto.spacemesh.v1.LayerLimits.deserializeBinaryFromReader);
      msg.setLimits(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxGas(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGasPrice(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxSpend(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRaw(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPrincipal();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.spacemesh.v1.AccountId.serializeBinaryToWriter
    );
  }
  f = message.getTemplate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.spacemesh.v1.AccountId.serializeBinaryToWriter
    );
  }
  f = message.getMethod();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getNonce();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.spacemesh.v1.Nonce.serializeBinaryToWriter
    );
  }
  f = message.getLimits();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.spacemesh.v1.LayerLimits.serializeBinaryToWriter
    );
  }
  f = message.getMaxGas();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getGasPrice();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getMaxSpend();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getRaw_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {string}
 */
proto.spacemesh.v1.Transaction.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.spacemesh.v1.Transaction.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.Transaction.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.spacemesh.v1.Transaction} returns this
 */
proto.spacemesh.v1.Transaction.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional AccountId principal = 2;
 * @return {?proto.spacemesh.v1.AccountId}
 */
proto.spacemesh.v1.Transaction.prototype.getPrincipal = function() {
  return /** @type{?proto.spacemesh.v1.AccountId} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.AccountId, 2));
};


/**
 * @param {?proto.spacemesh.v1.AccountId|undefined} value
 * @return {!proto.spacemesh.v1.Transaction} returns this
*/
proto.spacemesh.v1.Transaction.prototype.setPrincipal = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.spacemesh.v1.Transaction} returns this
 */
proto.spacemesh.v1.Transaction.prototype.clearPrincipal = function() {
  return this.setPrincipal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.spacemesh.v1.Transaction.prototype.hasPrincipal = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional AccountId template = 3;
 * @return {?proto.spacemesh.v1.AccountId}
 */
proto.spacemesh.v1.Transaction.prototype.getTemplate = function() {
  return /** @type{?proto.spacemesh.v1.AccountId} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.AccountId, 3));
};


/**
 * @param {?proto.spacemesh.v1.AccountId|undefined} value
 * @return {!proto.spacemesh.v1.Transaction} returns this
*/
proto.spacemesh.v1.Transaction.prototype.setTemplate = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.spacemesh.v1.Transaction} returns this
 */
proto.spacemesh.v1.Transaction.prototype.clearTemplate = function() {
  return this.setTemplate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.spacemesh.v1.Transaction.prototype.hasTemplate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 method = 4;
 * @return {number}
 */
proto.spacemesh.v1.Transaction.prototype.getMethod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.spacemesh.v1.Transaction} returns this
 */
proto.spacemesh.v1.Transaction.prototype.setMethod = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional Nonce nonce = 5;
 * @return {?proto.spacemesh.v1.Nonce}
 */
proto.spacemesh.v1.Transaction.prototype.getNonce = function() {
  return /** @type{?proto.spacemesh.v1.Nonce} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.Nonce, 5));
};


/**
 * @param {?proto.spacemesh.v1.Nonce|undefined} value
 * @return {!proto.spacemesh.v1.Transaction} returns this
*/
proto.spacemesh.v1.Transaction.prototype.setNonce = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.spacemesh.v1.Transaction} returns this
 */
proto.spacemesh.v1.Transaction.prototype.clearNonce = function() {
  return this.setNonce(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.spacemesh.v1.Transaction.prototype.hasNonce = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional LayerLimits limits = 6;
 * @return {?proto.spacemesh.v1.LayerLimits}
 */
proto.spacemesh.v1.Transaction.prototype.getLimits = function() {
  return /** @type{?proto.spacemesh.v1.LayerLimits} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.LayerLimits, 6));
};


/**
 * @param {?proto.spacemesh.v1.LayerLimits|undefined} value
 * @return {!proto.spacemesh.v1.Transaction} returns this
*/
proto.spacemesh.v1.Transaction.prototype.setLimits = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.spacemesh.v1.Transaction} returns this
 */
proto.spacemesh.v1.Transaction.prototype.clearLimits = function() {
  return this.setLimits(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.spacemesh.v1.Transaction.prototype.hasLimits = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint64 max_gas = 7;
 * @return {number}
 */
proto.spacemesh.v1.Transaction.prototype.getMaxGas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.spacemesh.v1.Transaction} returns this
 */
proto.spacemesh.v1.Transaction.prototype.setMaxGas = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 gas_price = 8;
 * @return {number}
 */
proto.spacemesh.v1.Transaction.prototype.getGasPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.spacemesh.v1.Transaction} returns this
 */
proto.spacemesh.v1.Transaction.prototype.setGasPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint64 max_spend = 9;
 * @return {number}
 */
proto.spacemesh.v1.Transaction.prototype.getMaxSpend = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.spacemesh.v1.Transaction} returns this
 */
proto.spacemesh.v1.Transaction.prototype.setMaxSpend = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional bytes raw = 10;
 * @return {string}
 */
proto.spacemesh.v1.Transaction.prototype.getRaw = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes raw = 10;
 * This is a type-conversion wrapper around `getRaw()`
 * @return {string}
 */
proto.spacemesh.v1.Transaction.prototype.getRaw_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRaw()));
};


/**
 * optional bytes raw = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRaw()`
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.Transaction.prototype.getRaw_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRaw()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.spacemesh.v1.Transaction} returns this
 */
proto.spacemesh.v1.Transaction.prototype.setRaw = function(value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.LayerLimits.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.LayerLimits.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.LayerLimits} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.LayerLimits.toObject = function(includeInstance, msg) {
  var f, obj = {
    min: jspb.Message.getFieldWithDefault(msg, 1, 0),
    max: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.LayerLimits}
 */
proto.spacemesh.v1.LayerLimits.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.LayerLimits;
  return proto.spacemesh.v1.LayerLimits.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.LayerLimits} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.LayerLimits}
 */
proto.spacemesh.v1.LayerLimits.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.LayerLimits.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.LayerLimits.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.LayerLimits} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.LayerLimits.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMin();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMax();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 min = 1;
 * @return {number}
 */
proto.spacemesh.v1.LayerLimits.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.spacemesh.v1.LayerLimits} returns this
 */
proto.spacemesh.v1.LayerLimits.prototype.setMin = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 max = 2;
 * @return {number}
 */
proto.spacemesh.v1.LayerLimits.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.spacemesh.v1.LayerLimits} returns this
 */
proto.spacemesh.v1.LayerLimits.prototype.setMax = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.Nonce.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.Nonce.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.Nonce} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Nonce.toObject = function(includeInstance, msg) {
  var f, obj = {
    counter: jspb.Message.getFieldWithDefault(msg, 1, 0),
    bitfield: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.Nonce}
 */
proto.spacemesh.v1.Nonce.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.Nonce;
  return proto.spacemesh.v1.Nonce.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.Nonce} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.Nonce}
 */
proto.spacemesh.v1.Nonce.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCounter(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBitfield(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.Nonce.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.Nonce.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.Nonce} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Nonce.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCounter();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getBitfield();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint64 counter = 1;
 * @return {number}
 */
proto.spacemesh.v1.Nonce.prototype.getCounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.spacemesh.v1.Nonce} returns this
 */
proto.spacemesh.v1.Nonce.prototype.setCounter = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 bitfield = 2;
 * @return {number}
 */
proto.spacemesh.v1.Nonce.prototype.getBitfield = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.spacemesh.v1.Nonce} returns this
 */
proto.spacemesh.v1.Nonce.prototype.setBitfield = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.MeshTransaction.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.MeshTransaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.MeshTransaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.MeshTransaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    transaction: (f = msg.getTransaction()) && proto.spacemesh.v1.Transaction.toObject(includeInstance, f),
    layerId: (f = msg.getLayerId()) && proto.spacemesh.v1.LayerNumber.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.MeshTransaction}
 */
proto.spacemesh.v1.MeshTransaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.MeshTransaction;
  return proto.spacemesh.v1.MeshTransaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.MeshTransaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.MeshTransaction}
 */
proto.spacemesh.v1.MeshTransaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.spacemesh.v1.Transaction;
      reader.readMessage(value,proto.spacemesh.v1.Transaction.deserializeBinaryFromReader);
      msg.setTransaction(value);
      break;
    case 2:
      var value = new proto.spacemesh.v1.LayerNumber;
      reader.readMessage(value,proto.spacemesh.v1.LayerNumber.deserializeBinaryFromReader);
      msg.setLayerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.MeshTransaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.MeshTransaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.MeshTransaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.MeshTransaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransaction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.spacemesh.v1.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getLayerId();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.spacemesh.v1.LayerNumber.serializeBinaryToWriter
    );
  }
};


/**
 * optional Transaction transaction = 1;
 * @return {?proto.spacemesh.v1.Transaction}
 */
proto.spacemesh.v1.MeshTransaction.prototype.getTransaction = function() {
  return /** @type{?proto.spacemesh.v1.Transaction} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.Transaction, 1));
};


/**
 * @param {?proto.spacemesh.v1.Transaction|undefined} value
 * @return {!proto.spacemesh.v1.MeshTransaction} returns this
*/
proto.spacemesh.v1.MeshTransaction.prototype.setTransaction = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.spacemesh.v1.MeshTransaction} returns this
 */
proto.spacemesh.v1.MeshTransaction.prototype.clearTransaction = function() {
  return this.setTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.spacemesh.v1.MeshTransaction.prototype.hasTransaction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LayerNumber layer_id = 2;
 * @return {?proto.spacemesh.v1.LayerNumber}
 */
proto.spacemesh.v1.MeshTransaction.prototype.getLayerId = function() {
  return /** @type{?proto.spacemesh.v1.LayerNumber} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.LayerNumber, 2));
};


/**
 * @param {?proto.spacemesh.v1.LayerNumber|undefined} value
 * @return {!proto.spacemesh.v1.MeshTransaction} returns this
*/
proto.spacemesh.v1.MeshTransaction.prototype.setLayerId = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.spacemesh.v1.MeshTransaction} returns this
 */
proto.spacemesh.v1.MeshTransaction.prototype.clearLayerId = function() {
  return this.setLayerId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.spacemesh.v1.MeshTransaction.prototype.hasLayerId = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.Reward.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.Reward.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.Reward} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Reward.toObject = function(includeInstance, msg) {
  var f, obj = {
    layer: (f = msg.getLayer()) && proto.spacemesh.v1.LayerNumber.toObject(includeInstance, f),
    total: (f = msg.getTotal()) && proto.spacemesh.v1.Amount.toObject(includeInstance, f),
    layerReward: (f = msg.getLayerReward()) && proto.spacemesh.v1.Amount.toObject(includeInstance, f),
    layerComputed: (f = msg.getLayerComputed()) && proto.spacemesh.v1.LayerNumber.toObject(includeInstance, f),
    coinbase: (f = msg.getCoinbase()) && proto.spacemesh.v1.AccountId.toObject(includeInstance, f),
    smesher: (f = msg.getSmesher()) && proto.spacemesh.v1.SmesherId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.Reward}
 */
proto.spacemesh.v1.Reward.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.Reward;
  return proto.spacemesh.v1.Reward.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.Reward} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.Reward}
 */
proto.spacemesh.v1.Reward.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.spacemesh.v1.LayerNumber;
      reader.readMessage(value,proto.spacemesh.v1.LayerNumber.deserializeBinaryFromReader);
      msg.setLayer(value);
      break;
    case 2:
      var value = new proto.spacemesh.v1.Amount;
      reader.readMessage(value,proto.spacemesh.v1.Amount.deserializeBinaryFromReader);
      msg.setTotal(value);
      break;
    case 3:
      var value = new proto.spacemesh.v1.Amount;
      reader.readMessage(value,proto.spacemesh.v1.Amount.deserializeBinaryFromReader);
      msg.setLayerReward(value);
      break;
    case 4:
      var value = new proto.spacemesh.v1.LayerNumber;
      reader.readMessage(value,proto.spacemesh.v1.LayerNumber.deserializeBinaryFromReader);
      msg.setLayerComputed(value);
      break;
    case 5:
      var value = new proto.spacemesh.v1.AccountId;
      reader.readMessage(value,proto.spacemesh.v1.AccountId.deserializeBinaryFromReader);
      msg.setCoinbase(value);
      break;
    case 6:
      var value = new proto.spacemesh.v1.SmesherId;
      reader.readMessage(value,proto.spacemesh.v1.SmesherId.deserializeBinaryFromReader);
      msg.setSmesher(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.Reward.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.Reward.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.Reward} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Reward.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLayer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.spacemesh.v1.LayerNumber.serializeBinaryToWriter
    );
  }
  f = message.getTotal();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.spacemesh.v1.Amount.serializeBinaryToWriter
    );
  }
  f = message.getLayerReward();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.spacemesh.v1.Amount.serializeBinaryToWriter
    );
  }
  f = message.getLayerComputed();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.spacemesh.v1.LayerNumber.serializeBinaryToWriter
    );
  }
  f = message.getCoinbase();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.spacemesh.v1.AccountId.serializeBinaryToWriter
    );
  }
  f = message.getSmesher();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.spacemesh.v1.SmesherId.serializeBinaryToWriter
    );
  }
};


/**
 * optional LayerNumber layer = 1;
 * @return {?proto.spacemesh.v1.LayerNumber}
 */
proto.spacemesh.v1.Reward.prototype.getLayer = function() {
  return /** @type{?proto.spacemesh.v1.LayerNumber} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.LayerNumber, 1));
};


/**
 * @param {?proto.spacemesh.v1.LayerNumber|undefined} value
 * @return {!proto.spacemesh.v1.Reward} returns this
*/
proto.spacemesh.v1.Reward.prototype.setLayer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.spacemesh.v1.Reward} returns this
 */
proto.spacemesh.v1.Reward.prototype.clearLayer = function() {
  return this.setLayer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.spacemesh.v1.Reward.prototype.hasLayer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Amount total = 2;
 * @return {?proto.spacemesh.v1.Amount}
 */
proto.spacemesh.v1.Reward.prototype.getTotal = function() {
  return /** @type{?proto.spacemesh.v1.Amount} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.Amount, 2));
};


/**
 * @param {?proto.spacemesh.v1.Amount|undefined} value
 * @return {!proto.spacemesh.v1.Reward} returns this
*/
proto.spacemesh.v1.Reward.prototype.setTotal = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.spacemesh.v1.Reward} returns this
 */
proto.spacemesh.v1.Reward.prototype.clearTotal = function() {
  return this.setTotal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.spacemesh.v1.Reward.prototype.hasTotal = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Amount layer_reward = 3;
 * @return {?proto.spacemesh.v1.Amount}
 */
proto.spacemesh.v1.Reward.prototype.getLayerReward = function() {
  return /** @type{?proto.spacemesh.v1.Amount} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.Amount, 3));
};


/**
 * @param {?proto.spacemesh.v1.Amount|undefined} value
 * @return {!proto.spacemesh.v1.Reward} returns this
*/
proto.spacemesh.v1.Reward.prototype.setLayerReward = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.spacemesh.v1.Reward} returns this
 */
proto.spacemesh.v1.Reward.prototype.clearLayerReward = function() {
  return this.setLayerReward(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.spacemesh.v1.Reward.prototype.hasLayerReward = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional LayerNumber layer_computed = 4;
 * @return {?proto.spacemesh.v1.LayerNumber}
 */
proto.spacemesh.v1.Reward.prototype.getLayerComputed = function() {
  return /** @type{?proto.spacemesh.v1.LayerNumber} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.LayerNumber, 4));
};


/**
 * @param {?proto.spacemesh.v1.LayerNumber|undefined} value
 * @return {!proto.spacemesh.v1.Reward} returns this
*/
proto.spacemesh.v1.Reward.prototype.setLayerComputed = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.spacemesh.v1.Reward} returns this
 */
proto.spacemesh.v1.Reward.prototype.clearLayerComputed = function() {
  return this.setLayerComputed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.spacemesh.v1.Reward.prototype.hasLayerComputed = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional AccountId coinbase = 5;
 * @return {?proto.spacemesh.v1.AccountId}
 */
proto.spacemesh.v1.Reward.prototype.getCoinbase = function() {
  return /** @type{?proto.spacemesh.v1.AccountId} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.AccountId, 5));
};


/**
 * @param {?proto.spacemesh.v1.AccountId|undefined} value
 * @return {!proto.spacemesh.v1.Reward} returns this
*/
proto.spacemesh.v1.Reward.prototype.setCoinbase = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.spacemesh.v1.Reward} returns this
 */
proto.spacemesh.v1.Reward.prototype.clearCoinbase = function() {
  return this.setCoinbase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.spacemesh.v1.Reward.prototype.hasCoinbase = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional SmesherId smesher = 6;
 * @return {?proto.spacemesh.v1.SmesherId}
 */
proto.spacemesh.v1.Reward.prototype.getSmesher = function() {
  return /** @type{?proto.spacemesh.v1.SmesherId} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.SmesherId, 6));
};


/**
 * @param {?proto.spacemesh.v1.SmesherId|undefined} value
 * @return {!proto.spacemesh.v1.Reward} returns this
*/
proto.spacemesh.v1.Reward.prototype.setSmesher = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.spacemesh.v1.Reward} returns this
 */
proto.spacemesh.v1.Reward.prototype.clearSmesher = function() {
  return this.setSmesher(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.spacemesh.v1.Reward.prototype.hasSmesher = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.spacemesh.v1.Block.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    proto.spacemesh.v1.Transaction.toObject, includeInstance),
    activationId: (f = msg.getActivationId()) && proto.spacemesh.v1.ActivationId.toObject(includeInstance, f),
    smesherId: (f = msg.getSmesherId()) && proto.spacemesh.v1.SmesherId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.Block}
 */
proto.spacemesh.v1.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.Block;
  return proto.spacemesh.v1.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.Block}
 */
proto.spacemesh.v1.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.spacemesh.v1.Transaction;
      reader.readMessage(value,proto.spacemesh.v1.Transaction.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    case 3:
      var value = new proto.spacemesh.v1.ActivationId;
      reader.readMessage(value,proto.spacemesh.v1.ActivationId.deserializeBinaryFromReader);
      msg.setActivationId(value);
      break;
    case 4:
      var value = new proto.spacemesh.v1.SmesherId;
      reader.readMessage(value,proto.spacemesh.v1.SmesherId.deserializeBinaryFromReader);
      msg.setSmesherId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.spacemesh.v1.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getActivationId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.spacemesh.v1.ActivationId.serializeBinaryToWriter
    );
  }
  f = message.getSmesherId();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.spacemesh.v1.SmesherId.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {string}
 */
proto.spacemesh.v1.Block.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.spacemesh.v1.Block.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.Block.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.spacemesh.v1.Block} returns this
 */
proto.spacemesh.v1.Block.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated Transaction transactions = 2;
 * @return {!Array<!proto.spacemesh.v1.Transaction>}
 */
proto.spacemesh.v1.Block.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.spacemesh.v1.Transaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.spacemesh.v1.Transaction, 2));
};


/**
 * @param {!Array<!proto.spacemesh.v1.Transaction>} value
 * @return {!proto.spacemesh.v1.Block} returns this
*/
proto.spacemesh.v1.Block.prototype.setTransactionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.spacemesh.v1.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.spacemesh.v1.Transaction}
 */
proto.spacemesh.v1.Block.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.spacemesh.v1.Transaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.spacemesh.v1.Block} returns this
 */
proto.spacemesh.v1.Block.prototype.clearTransactionsList = function() {
  return this.setTransactionsList([]);
};


/**
 * optional ActivationId activation_id = 3;
 * @return {?proto.spacemesh.v1.ActivationId}
 */
proto.spacemesh.v1.Block.prototype.getActivationId = function() {
  return /** @type{?proto.spacemesh.v1.ActivationId} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.ActivationId, 3));
};


/**
 * @param {?proto.spacemesh.v1.ActivationId|undefined} value
 * @return {!proto.spacemesh.v1.Block} returns this
*/
proto.spacemesh.v1.Block.prototype.setActivationId = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.spacemesh.v1.Block} returns this
 */
proto.spacemesh.v1.Block.prototype.clearActivationId = function() {
  return this.setActivationId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.spacemesh.v1.Block.prototype.hasActivationId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SmesherId smesher_id = 4;
 * @return {?proto.spacemesh.v1.SmesherId}
 */
proto.spacemesh.v1.Block.prototype.getSmesherId = function() {
  return /** @type{?proto.spacemesh.v1.SmesherId} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.SmesherId, 4));
};


/**
 * @param {?proto.spacemesh.v1.SmesherId|undefined} value
 * @return {!proto.spacemesh.v1.Block} returns this
*/
proto.spacemesh.v1.Block.prototype.setSmesherId = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.spacemesh.v1.Block} returns this
 */
proto.spacemesh.v1.Block.prototype.clearSmesherId = function() {
  return this.setSmesherId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.spacemesh.v1.Block.prototype.hasSmesherId = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.spacemesh.v1.Layer.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.Layer.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.Layer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.Layer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Layer.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: (f = msg.getNumber()) && proto.spacemesh.v1.LayerNumber.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    hash: msg.getHash_asB64(),
    blocksList: jspb.Message.toObjectList(msg.getBlocksList(),
    proto.spacemesh.v1.Block.toObject, includeInstance),
    activationsList: jspb.Message.toObjectList(msg.getActivationsList(),
    proto.spacemesh.v1.Activation.toObject, includeInstance),
    rootStateHash: msg.getRootStateHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.Layer}
 */
proto.spacemesh.v1.Layer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.Layer;
  return proto.spacemesh.v1.Layer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.Layer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.Layer}
 */
proto.spacemesh.v1.Layer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.spacemesh.v1.LayerNumber;
      reader.readMessage(value,proto.spacemesh.v1.LayerNumber.deserializeBinaryFromReader);
      msg.setNumber(value);
      break;
    case 2:
      var value = /** @type {!proto.spacemesh.v1.Layer.LayerStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 4:
      var value = new proto.spacemesh.v1.Block;
      reader.readMessage(value,proto.spacemesh.v1.Block.deserializeBinaryFromReader);
      msg.addBlocks(value);
      break;
    case 5:
      var value = new proto.spacemesh.v1.Activation;
      reader.readMessage(value,proto.spacemesh.v1.Activation.deserializeBinaryFromReader);
      msg.addActivations(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRootStateHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.Layer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.Layer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.Layer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.Layer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumber();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.spacemesh.v1.LayerNumber.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getBlocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.spacemesh.v1.Block.serializeBinaryToWriter
    );
  }
  f = message.getActivationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.spacemesh.v1.Activation.serializeBinaryToWriter
    );
  }
  f = message.getRootStateHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.spacemesh.v1.Layer.LayerStatus = {
  LAYER_STATUS_UNSPECIFIED: 0,
  LAYER_STATUS_APPROVED: 1,
  LAYER_STATUS_CONFIRMED: 2,
  LAYER_STATUS_APPLIED: 3
};

/**
 * optional LayerNumber number = 1;
 * @return {?proto.spacemesh.v1.LayerNumber}
 */
proto.spacemesh.v1.Layer.prototype.getNumber = function() {
  return /** @type{?proto.spacemesh.v1.LayerNumber} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.LayerNumber, 1));
};


/**
 * @param {?proto.spacemesh.v1.LayerNumber|undefined} value
 * @return {!proto.spacemesh.v1.Layer} returns this
*/
proto.spacemesh.v1.Layer.prototype.setNumber = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.spacemesh.v1.Layer} returns this
 */
proto.spacemesh.v1.Layer.prototype.clearNumber = function() {
  return this.setNumber(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.spacemesh.v1.Layer.prototype.hasNumber = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LayerStatus status = 2;
 * @return {!proto.spacemesh.v1.Layer.LayerStatus}
 */
proto.spacemesh.v1.Layer.prototype.getStatus = function() {
  return /** @type {!proto.spacemesh.v1.Layer.LayerStatus} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.spacemesh.v1.Layer.LayerStatus} value
 * @return {!proto.spacemesh.v1.Layer} returns this
 */
proto.spacemesh.v1.Layer.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bytes hash = 3;
 * @return {string}
 */
proto.spacemesh.v1.Layer.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes hash = 3;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.spacemesh.v1.Layer.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.Layer.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.spacemesh.v1.Layer} returns this
 */
proto.spacemesh.v1.Layer.prototype.setHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * repeated Block blocks = 4;
 * @return {!Array<!proto.spacemesh.v1.Block>}
 */
proto.spacemesh.v1.Layer.prototype.getBlocksList = function() {
  return /** @type{!Array<!proto.spacemesh.v1.Block>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.spacemesh.v1.Block, 4));
};


/**
 * @param {!Array<!proto.spacemesh.v1.Block>} value
 * @return {!proto.spacemesh.v1.Layer} returns this
*/
proto.spacemesh.v1.Layer.prototype.setBlocksList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.spacemesh.v1.Block=} opt_value
 * @param {number=} opt_index
 * @return {!proto.spacemesh.v1.Block}
 */
proto.spacemesh.v1.Layer.prototype.addBlocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.spacemesh.v1.Block, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.spacemesh.v1.Layer} returns this
 */
proto.spacemesh.v1.Layer.prototype.clearBlocksList = function() {
  return this.setBlocksList([]);
};


/**
 * repeated Activation activations = 5;
 * @return {!Array<!proto.spacemesh.v1.Activation>}
 */
proto.spacemesh.v1.Layer.prototype.getActivationsList = function() {
  return /** @type{!Array<!proto.spacemesh.v1.Activation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.spacemesh.v1.Activation, 5));
};


/**
 * @param {!Array<!proto.spacemesh.v1.Activation>} value
 * @return {!proto.spacemesh.v1.Layer} returns this
*/
proto.spacemesh.v1.Layer.prototype.setActivationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.spacemesh.v1.Activation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.spacemesh.v1.Activation}
 */
proto.spacemesh.v1.Layer.prototype.addActivations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.spacemesh.v1.Activation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.spacemesh.v1.Layer} returns this
 */
proto.spacemesh.v1.Layer.prototype.clearActivationsList = function() {
  return this.setActivationsList([]);
};


/**
 * optional bytes root_state_hash = 6;
 * @return {string}
 */
proto.spacemesh.v1.Layer.prototype.getRootStateHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes root_state_hash = 6;
 * This is a type-conversion wrapper around `getRootStateHash()`
 * @return {string}
 */
proto.spacemesh.v1.Layer.prototype.getRootStateHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRootStateHash()));
};


/**
 * optional bytes root_state_hash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRootStateHash()`
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.Layer.prototype.getRootStateHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRootStateHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.spacemesh.v1.Layer} returns this
 */
proto.spacemesh.v1.Layer.prototype.setRootStateHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.LayerNumber.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.LayerNumber.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.LayerNumber} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.LayerNumber.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.LayerNumber}
 */
proto.spacemesh.v1.LayerNumber.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.LayerNumber;
  return proto.spacemesh.v1.LayerNumber.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.LayerNumber} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.LayerNumber}
 */
proto.spacemesh.v1.LayerNumber.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.LayerNumber.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.LayerNumber.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.LayerNumber} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.LayerNumber.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumber();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 number = 1;
 * @return {number}
 */
proto.spacemesh.v1.LayerNumber.prototype.getNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.spacemesh.v1.LayerNumber} returns this
 */
proto.spacemesh.v1.LayerNumber.prototype.setNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.spacemesh.v1.AppEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.spacemesh.v1.AppEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.spacemesh.v1.AppEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.AppEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionId: (f = msg.getTransactionId()) && proto.spacemesh.v1.TransactionId.toObject(includeInstance, f),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.spacemesh.v1.AppEvent}
 */
proto.spacemesh.v1.AppEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.spacemesh.v1.AppEvent;
  return proto.spacemesh.v1.AppEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.spacemesh.v1.AppEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.spacemesh.v1.AppEvent}
 */
proto.spacemesh.v1.AppEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.spacemesh.v1.TransactionId;
      reader.readMessage(value,proto.spacemesh.v1.TransactionId.deserializeBinaryFromReader);
      msg.setTransactionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.spacemesh.v1.AppEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.spacemesh.v1.AppEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.spacemesh.v1.AppEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.spacemesh.v1.AppEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.spacemesh.v1.TransactionId.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional TransactionId transaction_id = 1;
 * @return {?proto.spacemesh.v1.TransactionId}
 */
proto.spacemesh.v1.AppEvent.prototype.getTransactionId = function() {
  return /** @type{?proto.spacemesh.v1.TransactionId} */ (
    jspb.Message.getWrapperField(this, proto.spacemesh.v1.TransactionId, 1));
};


/**
 * @param {?proto.spacemesh.v1.TransactionId|undefined} value
 * @return {!proto.spacemesh.v1.AppEvent} returns this
*/
proto.spacemesh.v1.AppEvent.prototype.setTransactionId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.spacemesh.v1.AppEvent} returns this
 */
proto.spacemesh.v1.AppEvent.prototype.clearTransactionId = function() {
  return this.setTransactionId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.spacemesh.v1.AppEvent.prototype.hasTransactionId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.spacemesh.v1.AppEvent.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.spacemesh.v1.AppEvent} returns this
 */
proto.spacemesh.v1.AppEvent.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.spacemesh.v1);
